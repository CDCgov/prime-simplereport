# this is the user-facing schema. Types and queries that are available to
# users should be in here.

# Infrastructure types

type Organization {
  id: ID!
  internalId: ID! @deprecated(reason: "alias for 'id'")
  name: String!
  type: String!
  externalId: String!
  testingFacility: [Facility!]!
    @deprecated(reason: "Use the one that makes sense")
  facilities: [Facility!]!
  identityVerified: Boolean!
  patientSelfRegistrationLink: String
}

type Facility {
  id: ID!
  name: String!
  cliaNumber: String
  address: AddressInfo
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
  email: String
  deviceTypes: [DeviceType!]!
  orderingProvider: Provider
  patientSelfRegistrationLink: String
  isDeleted: Boolean
}

type FacilityStats {
  usersSingleAccessCount: Int
  patientsSingleAccessCount: Int
}

type Provider {
  name: NameInfo
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  NPI: String
  address: AddressInfo
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
}

input CreateDeviceType {
  name: String!
  manufacturer: String!
  model: String!
  swabTypes: [ID!]!
  supportedDiseaseTestPerformed: [SupportedDiseaseTestPerformedInput!]!
  testLength: Int!
}

input UpdateDeviceType {
  internalId: ID!
  name: String!
  manufacturer: String!
  model: String!
  swabTypes: [ID!]!
  supportedDiseaseTestPerformed: [SupportedDiseaseTestPerformedInput!]!
  testLength: Int!
}

input SupportedDiseaseTestPerformedInput {
  supportedDisease: ID!
  testPerformedLoincCode: String!
  testPerformedLoincLongName: String
  equipmentUid: String
  equipmentUidType: String
  testkitNameId: String
  testOrderedLoincCode: String
  testOrderedLoincLongName: String
}

type DeviceType {
  internalId: ID!
  name: String!
  manufacturer: String!
  model: String!
  swabTypes: [SpecimenType!]!
  supportedDiseaseTestPerformed: [SupportedDiseaseTestPerformed!]!
  testLength: Int!
}

type SupportedDiseaseTestPerformed {
  supportedDisease: SupportedDisease!
  testPerformedLoincCode: String!
  testPerformedLoincLongName: String
  equipmentUid: String
  equipmentUidType: String
  testkitNameId: String
  testOrderedLoincCode: String
  testOrderedLoincLongName: String
}

type SupportedDisease {
  internalId: ID!
  name: String!
  loinc: String!
}

input CreateSpecimenType {
  name: String!
  typeCode: String!
  collectionLocationName: String
  collectionLocationCode: String
}

input UpdateSpecimenType {
  name: String!
  typeCode: String!
  collectionLocationName: String
  collectionLocationCode: String
}

type SpecimenType {
  internalId: ID!
  name: String!
  typeCode: String!
  collectionLocationName: String
  collectionLocationCode: String
}

type PhoneNumber {
  type: PhoneType
  number: String
}

input PhoneNumberInput {
  type: String
  number: String
}

# User-management types

# Note: the login username is the user's email
type User {
  id: ID!
  name: NameInfo!
  firstName: String
  middleName: String
  lastName: String!
  suffix: String
  email: String!
  isAdmin: Boolean
  roleDescription: String!
  permissions: [UserPermission!]!
  organization: Organization
  # for backward compatibility, currently maintaining both `role` and `roles`
  role: Role
  roles: [Role!]! @deprecated(reason: "Users have only one role now")
  status: String
  isDeleted: Boolean
}

input UserInput {
  name: NameInput
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  email: String!
  organizationExternalId: String
  role: Role!
  accessAllFacilities: Boolean = false
  facilities: [ID!]
}

type ApiUser {
  id: ID
  name: NameInfo!
  nameInfo: NameInfo
    @deprecated(reason: "needless connection of type to field name")
  firstName: String
  middleName: String
  lastName: String!
  suffix: String
  email: String!
}

type ApiUserWithStatus {
  id: ID!
  name: NameInfo!
  firstName: String
  middleName: String
  lastName: String!
  suffix: String
  email: String!
  status: String
}

type ApiUserWithStatusPage {
  totalElements: Int!
  content: [ApiUserWithStatus!]
}

type ApiUserWithStatusAndCountPage {
  pageContent: ApiUserWithStatusPage!
  totalUsersInOrg: Int!
}

# Patient and test types

type Patient
  @requiredPermissions(
    anyOf: ["READ_PATIENT_LIST", "SEARCH_PATIENTS", "UPDATE_TEST"]
  ) {
  id: ID!
  internalId: ID! @deprecated(reason: "alias for 'id'")
  facility: Facility
  lookupId: String
  name: NameInfo
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  race: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  birthDate: LocalDate
  gender: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  genderIdentity: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  ethnicity: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  tribalAffiliation: [String] @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  address: AddressInfo @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  street: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  streetTwo: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  city: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  county: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  country: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  state: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  zipCode: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  telephone: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  phoneNumbers: [PhoneNumber]
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  email: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  emails: [String]
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  role: String @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  isDeleted: Boolean @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  residentCongregateSetting: Boolean
    @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  employedInHealthcare: Boolean
    @requiredPermissions(allOf: ["READ_PATIENT_LIST"])
  lastTest: TestResult
    @requiredPermissions(anyOf: ["READ_RESULT_LIST", "UPDATE_TEST"])
  testResultDelivery: TestResultDeliveryPreference
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  preferredLanguage: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
  notes: String
    @requiredPermissions(anyOf: ["READ_PATIENT_LIST", "UPDATE_TEST"])
}

# TestResult and TestOrder should have the same properties
type TestOrder {
  id: ID!
  internalId: ID! @deprecated(reason: "alias for 'id'")
  patient: Patient!
  facility: Facility!
  dateAdded: String!
  dateUpdated: DateTime
  pregnancy: String
  syphilisHistory: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: LocalDate
  genderOfSexualPartners: [String]
  deviceType: DeviceType!
  specimenType: SpecimenType!
  results: [MultiplexResult!]!
  dateTested: DateTime
  correctionStatus: String
  reasonForCorrection: String
  timerStartedAt: String
}

type TestResult {
  internalId: ID
  facility: Facility
  patient: Patient
  dateAdded: String
  dateUpdated: DateTime
  pregnancy: String
  syphilisHistory: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: LocalDate
  genderOfSexualPartners: [String]
  deviceType: DeviceType
  results: [MultiplexResult!]
  dateTested: DateTime
  correctionStatus: String
  reasonForCorrection: String
  createdBy: ApiUser
  patientLink: PatientLink
  surveyData: AskOnEntrySurvey
}

type TestResultsPage {
  totalElements: Int
  content: [TestResult]
}

type AskOnEntrySurvey {
  pregnancy: String
  syphilisHistory: String
  symptoms: String
  symptomOnset: LocalDate
  noSymptoms: Boolean
  genderOfSexualPartners: [String!]
}

type Result {
  id: ID!
  facility: Facility!
  patient: Patient!
  dateAdded: String!
  dateUpdated: DateTime
  deviceType: DeviceType!
  disease: String!
  testResult: String!
  dateTested: DateTime!
  correctionStatus: String
  reasonForCorrection: String
  createdBy: ApiUser
  surveyData: AskOnEntrySurvey
  patientLink: PatientLink
}

type ResultsPage {
  totalElements: Int
  content: [Result]
}

type MultiplexResult {
  disease: SupportedDisease!
  testResult: String!
}

input MultiplexResultInput {
  diseaseName: String
  testResult: String
}

type OrganizationLevelDashboardMetrics {
  organizationPositiveTestCount: Int
  organizationNegativeTestCount: Int
  organizationTotalTestCount: Int
  facilityMetrics: [AggregateFacilityMetrics]
}

type TopLevelDashboardMetrics {
  positiveTestCount: Int
  totalTestCount: Int
}

type AggregateFacilityMetrics {
  facilityName: String
  totalTestCount: Int
  positiveTestCount: Int
  negativeTestCount: Int
}

type AddTestResultResponse {
  testResult: TestOrder!
  deliverySuccess: Boolean
  testEventId: ID!
}

type PatientLink {
  internalId: ID
  createdAt: DateTime
  expiresAt: DateTime
  testOrder: TestOrder
}

type PendingOrganization {
  externalId: String!
  name: String!
  adminFirstName: String!
  adminLastName: String!
  adminEmail: String!
  adminPhone: String!
  createdAt: DateTime!
}

type UploadResult {
  internalId: ID!
  reportId: ID
  createdAt: DateTime!
  status: UploadStatus!
  recordsCount: Int!
  warnings: [FeedbackMessage]
  errors: [FeedbackMessage]
}

type UploadResponse {
  reportId: ID!
  createdAt: DateTime!
  status: UploadStatus!
  recordsCount: Int!
  warnings: [FeedbackMessage]
  errors: [FeedbackMessage]
}

type FeedbackMessage {
  scope: String
  message: String
  indices: [Int]
  fieldHeader: String!
  errorType: String!
  fieldRequired: Boolean!
}

type UploadSubmissionPage {
  totalElements: Int!
  content: [UploadResult!]!
}

type FeatureFlag {
  name: String!
  value: Boolean!
}

input PatientReportInput {
  firstName: String!
  middleName: String
  lastName: String!
  suffix: String
  email: String
  phone: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  country: String
  sex: String
  dateOfBirth: LocalDate!
  race: String
  ethnicity: String
  tribalAffiliation: String
}

input ProviderReportInput {
  firstName: String!
  middleName: String
  lastName: String!
  suffix: String
  npi: String!
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  country: String
  email: String
  phone: String
}

input FacilityReportInput {
  name: String!
  phone: String
  email: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  country: String
  clia: String!
}

input SpecimenInput {
  snomedTypeCode: String!
  collectionDate: DateTime
  receivedDate: DateTime
  collectionLocationName: String
  collectionLocationCode: String
}

input TestDetailsInput {
  testOrderLoinc: String!
  testPerformedLoinc: String!
  testPerformedLoincLongCommonName: String
  resultType: ResultScaleType!
  resultValue: String!
  resultDate: DateTime
  resultInterpretation: String
}

enum ResultScaleType {
  QUANTITATIVE
  ORDINAL
  NOMINAL
}

type Condition {
  code: String!
  display: String!
}

type Lab {
  code: String!
  display: String!
  description: String
  longCommonName: String!
  scaleCode: String
  scaleDisplay: String
  systemCode: String!
  systemDisplay: String
  answerList: String
  orderOrObservation: String!
  panel: Boolean!
}

# specimen for universal reporting
type Specimen {
  loincSystemCode: String!
  snomedCode: String!
  snomedDisplay: String!
  bodySiteList: [SpecimenBodySite!]!
}

type SpecimenBodySite {
  snomedSpecimenCode: String
  snomedSpecimenDisplay: String
  snomedSiteCode: String!
  snomedSiteDisplay: String!
}

# Queries and mutations for everyday use

type Query {
  deviceType: [DeviceType!]!
    @deprecated(reason: "use the pluralized form to reduce confusion")
  deviceTypes: [DeviceType!]!
  supportedDiseases: [SupportedDisease!]!
  specimenType: [SpecimenType]
  facilities(
    showArchived: Boolean = false
      @requiredPermissions(allOf: ["VIEW_ARCHIVED_FACILITIES"])
  ): [Facility]
  facility(id: ID!): Facility
  patients(
    facilityId: ID
    pageNumber: Int = 0
    pageSize: Int = 5000
    includeArchived: Boolean = false
      @requiredPermissions(allOf: ["READ_ARCHIVED_PATIENT_LIST"])
      @deprecated(reason: "use archivedStatus")
    archivedStatus: ArchivedStatus = UNARCHIVED
      @requiredPermissions(allOf: ["READ_ARCHIVED_PATIENT_LIST"])
    namePrefixMatch: String
    includeArchivedFacilities: Boolean = false
      @requiredPermissions(allOf: ["VIEW_ARCHIVED_FACILITIES"])
    orgExternalId: String
  ): [Patient]
    @requiredPermissions(anyOf: ["SEARCH_PATIENTS", "READ_PATIENT_LIST"])
  patientsCount(
    facilityId: ID
    includeArchived: Boolean = false
      @requiredPermissions(allOf: ["READ_ARCHIVED_PATIENT_LIST"])
      @deprecated(reason: "use archivedStatus")
    archivedStatus: ArchivedStatus = UNARCHIVED
      @requiredPermissions(allOf: ["READ_ARCHIVED_PATIENT_LIST"])
    namePrefixMatch: String
    orgExternalId: String
  ): Int @requiredPermissions(anyOf: ["SEARCH_PATIENTS", "READ_PATIENT_LIST"])
  patient(id: ID!): Patient
  patientExists(
    firstName: String!
    lastName: String!
    birthDate: LocalDate!
    zipCode: String!
    facilityId: ID
  ): Boolean
  patientExistsWithoutZip(
    firstName: String!
    lastName: String!
    birthDate: LocalDate!
    facilityId: ID
  ): Boolean
  queue(facilityId: ID!): [TestOrder]
    @requiredPermissions(anyOf: ["START_TEST", "UPDATE_TEST", "SUBMIT_TEST"])
  specimenTypes: [SpecimenType!]!
  testResults(
    facilityId: ID
    patientId: ID
    result: String
    role: String
    startDate: DateTime
    endDate: DateTime
    pageNumber: Int = 0
    pageSize: Int = 5000
      @deprecated(
        reason: "use testResultsPage call instead to access both results and count at once"
      )
  ): [TestResult] @requiredPermissions(allOf: ["READ_RESULT_LIST"])
  testResultsPage(
    facilityId: ID
    patientId: ID
    result: String
    role: String
    disease: String
    startDate: DateTime
    endDate: DateTime
    pageNumber: Int = 0
    pageSize: Int = 5000
  ): TestResultsPage @requiredPermissions(allOf: ["READ_RESULT_LIST"])
  testResultsCount(
    facilityId: ID
    patientId: ID
    result: String
    role: String
    startDate: DateTime
    endDate: DateTime
    orgId: ID
  ): Int @requiredPermissions(allOf: ["READ_RESULT_LIST"])
  testResult(id: ID!): TestResult
    @requiredPermissions(allOf: ["READ_RESULT_LIST"])
  resultsPage(
    facilityId: ID
    patientId: ID
    result: String
    role: String
    disease: String
    startDate: DateTime
    endDate: DateTime
    pageNumber: Int = 0
    pageSize: Int = 5000
  ): ResultsPage @requiredPermissions(allOf: ["READ_RESULT_LIST"])
  organizationLevelDashboardMetrics(
    startDate: DateTime!
    endDate: DateTime!
  ): OrganizationLevelDashboardMetrics
    @requiredPermissions(allOf: ["EDIT_ORGANIZATION"])
  topLevelDashboardMetrics(
    facilityId: ID
    startDate: DateTime
    endDate: DateTime
    disease: String
  ): TopLevelDashboardMetrics @requiredPermissions(allOf: ["EDIT_ORGANIZATION"])
  users: [ApiUser] @requiredPermissions(allOf: ["MANAGE_USERS"])
  usersWithStatus: [ApiUserWithStatus!]
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  usersWithStatusPage(pageNumber: Int, searchQuery: String): ApiUserWithStatusAndCountPage! @requiredPermissions(allOf: ["MANAGE_USERS"])
  user(id: ID, email: String): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  whoami: User!
  uploadSubmission(id: ID!): UploadResponse!
    @requiredPermissions(allOf: ["UPLOAD_RESULTS_SPREADSHEET"])
  uploadSubmissions(
    startDate: DateTime
    endDate: DateTime
    pageNumber: Int
    pageSize: Int
  ): UploadSubmissionPage!
    @requiredPermissions(allOf: ["UPLOAD_RESULTS_SPREADSHEET"])
  conditions: [Condition!]!
  labs(conditionCodes: [String!]): [Lab!]!
  specimens(loinc: String!): [Specimen!]!
  specimenBodySites(specimenSnomedCode: String!): [SpecimenBodySite!]!
}

type Mutation {
  updateFacility(facilityInfo: UpdateFacilityInput!): Facility
    @requiredPermissions(allOf: ["EDIT_FACILITY"])
  addFacility(facilityInfo: AddFacilityInput!): Facility
    @requiredPermissions(allOf: ["EDIT_FACILITY"])
  addUserToCurrentOrg(userInput: UserInput!): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  updateUser(
    id: ID!
    name: NameInput
    firstName: String
    middleName: String
    lastName: String
    suffix: String
  ): User @requiredPermissions(allOf: ["MANAGE_USERS"])
  updateUserPrivileges(
    id: ID!
    accessAllFacilities: Boolean!
    facilities: [ID!] @Size(min: 0, max: 5000)
    role: Role!
  ): User @requiredPermissions(allOf: ["MANAGE_USERS"])
  resetUserPassword(id: ID!): User @requiredPermissions(allOf: ["MANAGE_USERS"])
  resetUserMfa(id: ID!): User @requiredPermissions(allOf: ["MANAGE_USERS"])
  updateUserEmail(id: ID!, email: String): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  setUserIsDeleted(id: ID!, deleted: Boolean!): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  reactivateUser(id: ID!): User @requiredPermissions(allOf: ["MANAGE_USERS"])
  resendActivationEmail(id: ID!): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  reactivateUserAndResetPassword(id: ID!): User
    @requiredPermissions(allOf: ["MANAGE_USERS"])
  setCurrentUserTenantDataAccess(
    organizationExternalId: String
    justification: String
  ): User
  addPatient(
    facilityId: ID
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String
    birthDate: LocalDate!
    street: String!
    streetTwo: String
    city: String
    state: String!
    zipCode: String!
    telephone: String
    phoneNumbers: [PhoneNumberInput!]
    role: String
    email: String
    emails: [String]
    county: String
    country: String
    race: String
    ethnicity: String
    tribalAffiliation: String
    gender: String
    genderIdentity: String
    residentCongregateSetting: Boolean
    employedInHealthcare: Boolean
    preferredLanguage: String
    testResultDelivery: TestResultDeliveryPreference
    notes: String
  ): Patient @requiredPermissions(allOf: ["EDIT_PATIENT"])
  updatePatient(
    facilityId: ID @Size(min: 36, max: 36)
    patientId: ID! @Size(min: 36, max: 36)
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String @Size(min: 0, max: 32)
    birthDate: LocalDate!
    street: String!
    streetTwo: String
    city: String
    state: String!
      @Pattern(regexp: "[A-Z]{2}", message: "Use 2 letter state code")
    zipCode: String!
      @Pattern(
        regexp: "[0-9]{5}(-[0-9]{4})?"
        message: "Use ZIP or ZIP+4 format"
      )
    telephone: String
    phoneNumbers: [PhoneNumberInput!]
    role: String @Size(min: 0, max: 32)
    email: String @Size(min: 3, max: 254)
    emails: [String]
    county: String
    country: String
    race: String @Size(min: 0, max: 32)
    ethnicity: String @Size(min: 0, max: 32)
    tribalAffiliation: String @Size(min: 0, max: 3)
    gender: String @Size(min: 0, max: 32)
    genderIdentity: String
    residentCongregateSetting: Boolean
    employedInHealthcare: Boolean
    preferredLanguage: String
    testResultDelivery: TestResultDeliveryPreference
    notes: String
  ): Patient @requiredPermissions(allOf: ["EDIT_PATIENT"])
  setPatientIsDeleted(
    id: ID!
    deleted: Boolean!
    orgExternalId: String
  ): Patient @requiredPermissions(allOf: ["ARCHIVE_PATIENT"])
  submitQueueItem(
    deviceTypeId: ID!
    specimenTypeId: ID!
    results: [MultiplexResultInput]!
    patientId: ID!
    dateTested: DateTime
  ): AddTestResultResponse @requiredPermissions(allOf: ["SUBMIT_TEST"])
  editQueueItem(
    id: ID!
    deviceTypeId: ID
    specimenTypeId: ID
    results: [MultiplexResultInput]
    dateTested: DateTime
  ): TestOrder @requiredPermissions(allOf: ["UPDATE_TEST"])
  correctTestMarkAsError(id: ID!, reason: String): TestResult
    @requiredPermissions(allOf: ["UPDATE_TEST"])
  correctTestMarkAsCorrection(id: ID!, reason: String): TestResult
    @requiredPermissions(allOf: ["UPDATE_TEST"])
  addPatientToQueue(
    facilityId: ID!
    patientId: ID!
    pregnancy: String
    syphilisHistory: String
    symptoms: String @Size(min: 0, max: 1024)
    symptomOnset: LocalDate
    noSymptoms: Boolean
    testResultDelivery: TestResultDeliveryPreference
  ): String @requiredPermissions(allOf: ["START_TEST"])
  removePatientFromQueue(patientId: ID!): String
    @requiredPermissions(allOf: ["UPDATE_TEST"])
  updateAoeQuestions(
    patientId: ID!
    pregnancy: String
    syphilisHistory: String
    symptoms: String @Size(min: 0, max: 1024)
    symptomOnset: LocalDate
    noSymptoms: Boolean
    genderOfSexualPartners: [String]
    testResultDelivery: TestResultDeliveryPreference
  ): String @requiredPermissions(allOf: ["UPDATE_TEST"])
  updateTestOrderTimerStartedAt(
    testOrderId: ID!
    startedAt: String
  ): String @requiredPermissions(allOf: ["UPDATE_TEST"])
  sendPatientLinkSms(internalId: ID!): Boolean
    @requiredPermissions(allOf: ["UPDATE_TEST"])
  sendPatientLinkSmsByTestEventId(testEventId: ID!): Boolean
    @requiredPermissions(allOf: ["UPDATE_TEST"])
  sendPatientLinkEmail(internalId: ID!): Boolean
  sendPatientLinkEmailByTestEventId(testEventId: ID!): Boolean
  updateOrganization(type: String!): String
    @requiredPermissions(allOf: ["EDIT_ORGANIZATION"])
  submitLabReport(
    patient: PatientReportInput
    provider: ProviderReportInput,
    facility: FacilityReportInput,
    specimen: SpecimenInput,
    testDetailsList: [TestDetailsInput]
  ): String
}
