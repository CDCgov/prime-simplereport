spring:
  config:
    use-legacy-processing: true
  main:
    banner-mode: "OFF"
  datasource:
    username: simple_report_app
    password: api123
    url: jdbc:postgresql://localhost:${SR_DB_PORT:5432}/simple_report
  jpa:
    database: POSTGRESQL
    hibernate.ddl-auto: validate
    open-in-view: false # this is misleading: we actually have a filter that does this instead
    properties:
      hibernate:
        default_schema: public # Using the public schema for now, so we don't have to add a manual step to the deploy process
  liquibase:
    default-schema: ${spring.jpa.properties.hibernate.default_schema}
    parameters:
      noPhiUsername: simple_report_no_phi
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  session:
    store-type: jdbc
    timeout: 15m
    jdbc:
        initialize-schema: never
        table-name: ${spring.jpa.properties.hibernate.default_schema}.spring_session
management:
  health.probes.enabled: true
graphql:
  servlet:
    mapping: /graphql
    enabled: true
    corsEnabled: true
    exception-handlers-enabled: true
  tools:
    schema-location-pattern: "**/*.graphqls"
  datetime:
    scalars:
      Date:
        scalar-name: DateTime
        format: yyyy-MM-dd'T'HH:MM:ss'Z'
      localDate:
        scalarName: MyLocalDate # graphql-datetime injects the LocalDate scalar no matter what. this rename allows us to reuse the LocalDate in FlexibleDateScalar
okta:
  oauth2:
    issuer: https://hhs-prime.okta.com/oauth2/default
    client-id: ${OKTA_OAUTH2_CLIENT_ID}
    client-secret: ${OKTA_OAUTH2_CLIENT_SECRET:MISSING}
    groups-claim: ${simple-report.authorization.role-claim}
  client:
    org-url: https://hhs-prime.okta.com
    token: ${OKTA_API_KEY:MISSING}
smarty-streets:
  id: ${SMARTY_AUTH_ID}
  token: ${SMARTY_AUTH_TOKEN}
simple-report:
  data-hub:
    # these are overridden by application-dev, -prod, -test, etc
    upload-enabled: false
    upload-url: ""
    max-csv-rows: 999
    api-key: ${DATAHUB_API_KEY:MISSING}
    secret-slack-notify-webhook-url: ${SECRET_SLACK_NOTIFY_WEBHOOK_URL:MISSING}
    upload-schedule: "0 0 11 * * *" # Daily at 11:00 AM Eastern Time
    upload-timezone: America/New_York
  authorization:
    # these are overridden by application-dev, -prod, -test, etc
    role-claim: dev_roles
    environment-name: "DEV"
  ordering-providers:
    states-not-required:
      - ND
  sendgrid:
    enabled: false
    from-email: support@simplereport.gov
    from-display-name: SimpleReport Support (CDC)
    account-request-recipient:
      - support@simplereport.gov
    waitlist-recipient:
      - support@simplereport.gov
    dynamic-templates:
      # The templates are added and edited at: https://mc.sendgrid.com/dynamic-templates
      # The keys in this map should match (but don't have to) the names of SendGrid Dynamic Templates that
      # are in the web app, but *must* have a corresponding entry in the enum `EmailProviderTemplate`.
      # The values of the map are the GUID value for the Dynamic Template (also found in the SendGrid web
      # app).  New versions of the template do not change this value.
      ACCOUNT_REQUEST: d-7b0c7810ce5643f295e169f38b8db015
  dynamics:
    enabled: false
    client-id: ${DYNAMICS_CLIENT_ID:MISSING}
    client-secret: ${DYNAMICS_CLIENT_SECRET:MISSING}
    tenant-id: ${DYNAMICS_TENANT_ID:MISSING}
    resource-url: ${DYNAMICS_RESOURCE_URL:MISSING}
  experian:
    enabled: false
    token-endpoint: ${EXPERIAN_TOKEN_ENDPOINT}
    initial-request-endpoint: ${EXPERIAN_INITIAL_REQUEST_ENDPOINT}
    domain: ${EXPERIAN_DOMAIN}
    client-id: ${EXPERIAN_CLIENT_ID}
    client-secret: ${EXPERIAN_CLIENT_SECRET}
    crosscore-subscriber-subcode: ${EXPERIAN_CC_SUBSCRIBER_SUBCODE}
    crosscore-username: ${EXPERIAN_CC_USERNAME}
    crosscore-password: ${EXPERIAN_CC_PASSWORD}
    preciseid-tenant-id: ${EXPERIAN_PID_TENANT_ID}
    preciseid-client-reference-id: ${EXPERIAN_PID_CLIENT_REFERENCE_ID}
    preciseid-username: ${EXPERIAN_PID_USERNAME}
    preciseid-password: ${EXPERIAN_PID_PASSWORD}
  azure-reporting-queue:
    account-name: ${AZURE_REPORTING_QUEUE_ACCOUNT_NAME}
    sas-token: ${AZURE_REPORTING_QUEUE_SAS_TOKEN}
    queue-name: ${AZURE_REPORTING_QUEUE_QUEUE_NAME}
  cors:
    allowed-methods:
      - GET
      - HEAD
      - POST
twilio:
  from-number: "+12023014570"
logging:
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} [Query: %X{graphql-query}] %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
