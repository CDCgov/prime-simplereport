spring:
  config:
    use-legacy-processing: true
  main:
    banner-mode: "OFF"
  datasource:
    simplereport:
      username: simple_report_app
      password: api123
      hikari:
        jdbc-url: jdbc:postgresql://localhost:${SR_DB_PORT:5432}/simple_report
        maximum-pool-size: 50 # Maximum size that the pool is allowed to reach, including both idle and active connections. Effectively reflects number of concurrent database request threads. (Ex: A size of 50 represents a maximum capacity of 50 concurrent DB requests.)
        max-lifetime: 600000 # Maximum lifetime for a connection to be retained in the pool, in milliseconds, once it is closed.
        minimum-idle: 30 # Minimum number of idle connections to be retained in the pool. When a connection has been idle for the length of time specified in `idle-timeout`, it will be purged from the pool. This will allow for any un-closed, inactive transactions to be cleaned up more readily.
        # idle-timeout: 600000 # Maximum lifetime for idle connections before they are purged from the pool. Only active if `minimum-idle` is set to less than `maximum-pool-size`. Defaults to 10 minutes.
    metabase:
      username: simple_report_app
      password: api123
      hikari:
        maximum-pool-size: 2
        jdbc-url: jdbc:postgresql://localhost:${SR_DB_PORT:5432}/metabase
  jpa:
    database: POSTGRESQL
    hibernate.ddl-auto: validate
    open-in-view: false # this is misleading: we actually have a filter that does this instead
    properties:
      hibernate:
        default_schema: public # Using the public schema for now, so we don't have to add a manual step to the deploy process
  liquibase:
    simplereport:
      default-schema: ${spring.jpa.properties.hibernate.default_schema}
      parameters:
        noPhiUsername: simple_report_no_phi
        # Local dev: since the simple_report_no_phi user is created via script outside of the migrations, the migration CREATE ROLE (and this password) will be skipped - it's just for placeholder purposes.
        noPhiPassword: ${DB_PASSWORD_NO_PHI:nophi789}
    metabase:
      default-schema: ${spring.jpa.properties.hibernate.default_schema}
      parameters:
        noPhiUsername: simple_report_no_phi
      change-log: classpath:db/changelog/db.changelog-metabase.yaml
      database-change-log-table: databasechangelog-metabase
      database-change-log-lock-table: databasechangeloglock-metabase
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  session:
    store-type: jdbc
    timeout: 15m
    jdbc:
        initialize-schema: never
        table-name: ${spring.jpa.properties.hibernate.default_schema}.spring_session
management:
  health.probes.enabled: true
graphql:
  servlet:
    mapping: /graphql
    enabled: true
    corsEnabled: true
    exception-handlers-enabled: true
  playground:
    enabled: false
  tools:
    schema-location-pattern: "**/*.graphqls"
  datetime:
    scalars:
      Date:
        scalar-name: DateTime
        format: yyyy-MM-dd'T'HH:MM:ss'Z'
      localDate:
        scalarName: MyLocalDate # graphql-datetime injects the LocalDate scalar no matter what. this rename allows us to reuse the LocalDate in FlexibleDateScalar
okta:
  oauth2:
    issuer: https://hhs-prime.okta.com/oauth2/default
    client-id: ${OKTA_OAUTH2_CLIENT_ID}
    client-secret: ${OKTA_OAUTH2_CLIENT_SECRET:MISSING}
    groups-claim: ${simple-report.authorization.role-claim}
  client:
    org-url: https://hhs-prime.okta.com
    token: ${OKTA_API_KEY:MISSING}
smarty-streets:
  id: ${SMARTY_AUTH_ID}
  token: ${SMARTY_AUTH_TOKEN}
simple-report:
  id-verification-reminders:
    enabled: false
  authorization:
    # these are overridden by application-dev, -prod, -test, etc
    role-claim: dev_roles
    environment-name: "DEV"
  ordering-providers:
    states-not-required:
      - ND
  sendgrid:
    enabled: false
    from-email: support@simplereport.gov
    from-display-name: SimpleReport Support (CDC)
    account-request-recipient:
      - support@simplereport.gov
    waitlist-recipient:
      - support@simplereport.gov
    dynamic-templates:
      # The templates are added and edited at: https://mc.sendgrid.com/dynamic-templates
      # The keys in this map should match (but don't have to) the names of SendGrid Dynamic Templates that
      # are in the web app, but *must* have a corresponding entry in the enum `EmailProviderTemplate`.
      # The values of the map are the GUID value for the Dynamic Template (also found in the SendGrid web
      # app).  New versions of the template do not change this value.
      ACCOUNT_REQUEST: d-7b0c7810ce5643f295e169f38b8db015
      ID_VERIFICATION_FAILED: d-b629fce77d604a31a2872746674cf08e
      ORGANIZATION_ID_VERIFICATION_REMINDER: d-609321a63983416face1b032599202a4
      SIMPLE_REPORT_TEST_RESULT: d-5ce0fdd4d4614ea498026a54ec28b529
  experian:
    enabled: false
    token-endpoint: ${EXPERIAN_TOKEN_ENDPOINT}
    initial-request-endpoint: ${EXPERIAN_INITIAL_REQUEST_ENDPOINT}
    domain: ${EXPERIAN_DOMAIN}
    client-id: ${EXPERIAN_CLIENT_ID}
    client-secret: ${EXPERIAN_CLIENT_SECRET}
    crosscore-subscriber-subcode: ${EXPERIAN_CC_SUBSCRIBER_SUBCODE}
    crosscore-username: ${EXPERIAN_CC_USERNAME}
    crosscore-password: ${EXPERIAN_CC_PASSWORD}
    preciseid-tenant-id: ${EXPERIAN_PID_TENANT_ID}
    preciseid-client-reference-id: ${EXPERIAN_PID_CLIENT_REFERENCE_ID}
    preciseid-username: ${EXPERIAN_PID_USERNAME}
    preciseid-password: ${EXPERIAN_PID_PASSWORD}
  azure-reporting-queue:
    enabled: false
    exception-webhook-enabled: false
    exception-webhook-token: ${RS_QUEUE_CALLBACK_TOKEN}
    name: ${AZ_REPORTING_QUEUE_NAME:test-event-publishing}
    connection-string: ${AZ_REPORTING_QUEUE_CXN_STRING}
  cors:
    allowed-methods:
      - GET
      - HEAD
      - POST
twilio:
  from-number: "+12023014570"
logging:
  pattern:
    console: "{\"time\": \"%d{yyyy-MM-dd HH:mm:ss.SSS}\", \"level\": \"%p\", \"source\": \"%logger{39}:%L\", \"message\": \"%replace(%m%wEx){'[\r\n]+', '\\n'}%nopex\"}%n"
hibernate.query.interceptor.error-level: ERROR
