spring:
  profiles:
    group:
      test: no-security, no-okta-mgmt, no-okta-auth, no-experian
      dev: no-security, no-okta-mgmt, server-debug, create-sample-data, local, no-okta-auth
      e2e: server-debug, create-sample-devices
      okta-local: server-debug, create-sample-devices
      azure-dev: okta-dev, server-debug
      azure-dev2: okta-dev2, server-debug
      azure-dev3: okta-dev3, server-debug
      azure-dev4: okta-dev4, server-debug
      azure-dev5: okta-dev5, server-debug
      azure-dev6: okta-dev6, server-debug
      azure-pentest: okta-pentest
      azure-training: no-security, no-okta-mgmt, create-sample-data, no-okta-auth
      azure-test: okta-test, server-debug
      azure-demo: no-security, no-okta-mgmt, create-sample-data, no-okta-auth
      azure-stg: okta-stg
      azure-prod: okta-prod
      prod: okta-prod
  main:
    banner-mode: "OFF"
  datasource:
    simplereport:
      username: simple_report_app
      password: api123
      hikari:
        jdbc-url: jdbc:postgresql://localhost:${SR_DB_PORT:5432}/simple_report
        maximum-pool-size: 50 # Maximum size that the pool is allowed to reach, including both idle and active connections. Effectively reflects number of concurrent database request threads. (Ex: A size of 50 represents a maximum capacity of 50 concurrent DB requests.)
        max-lifetime: 600000 # Maximum lifetime for a connection to be retained in the pool, in milliseconds, once it is closed.
        minimum-idle: 30 # Minimum number of idle connections to be retained in the pool. When a connection has been idle for the length of time specified in `idle-timeout`, it will be purged from the pool. This will allow for any un-closed, inactive transactions to be cleaned up more readily.
        # idle-timeout: 600000 # Maximum lifetime for idle connections before they are purged from the pool. Only active if `minimum-idle` is set to less than `maximum-pool-size`. Defaults to 10 minutes.
    metabase:
      username: simple_report_app
      password: api123
      hikari:
        maximum-pool-size: 2
        jdbc-url: jdbc:postgresql://localhost:${SR_DB_PORT:5432}/metabase
  jpa:
    database: POSTGRESQL
    hibernate.ddl-auto: validate
    open-in-view: false # this is misleading: we actually have a filter that does this instead
    properties:
      hibernate:
        default_schema: public # Using the public schema for now, so we don't have to add a manual step to the deploy process
  liquibase:
    simplereport:
      default-schema: ${spring.jpa.properties.hibernate.default_schema}
      parameters:
        noPhiUsername: simple_report_no_phi
        # Local dev: since the simple_report_no_phi user is created via script outside of the migrations, the migration CREATE ROLE (and this password) will be skipped - it's just for placeholder purposes.
        noPhiPassword: ${DB_PASSWORD_NO_PHI:nophi789}
    metabase:
      default-schema: ${spring.jpa.properties.hibernate.default_schema}
      parameters:
        noPhiUsername: simple_report_no_phi
      change-log: classpath:db/changelog/db.changelog-metabase.yaml
      database-change-log-table: databasechangelog-metabase
      database-change-log-lock-table: databasechangeloglock-metabase
  jackson:
    serialization:
      FAIL_ON_EMPTY_BEANS: false
  session:
    store-type: jdbc
    timeout: 15m
    jdbc:
      initialize-schema: never
      table-name: ${spring.jpa.properties.hibernate.default_schema}.spring_session
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 60MB
  mvc:
    async:
      request-timeout: 140000 #delete after patient and test result download is removed
server:
  error:
    include-stacktrace: never
management:
  endpoints.web.exposure.include: health, info
  endpoint:
    info:
      enabled: true
    health:
      show-components: always
      status:
        http-mapping:
          okta_degraded: 204
      probes.enabled: true
okta:
  oauth2:
    issuer: https://hhs-prime.okta.com/oauth2/default
    client-id: ${OKTA_OAUTH2_CLIENT_ID}
    client-secret: ${OKTA_OAUTH2_CLIENT_SECRET:MISSING}
    groups-claim: ${simple-report.authorization.role-claim}
  client:
    org-url: https://hhs-prime.okta.com
    token: ${OKTA_API_KEY:MISSING}
smarty-streets:
  id: ${SMARTY_AUTH_ID}
  token: ${SMARTY_AUTH_TOKEN}
simple-report:
  id-verification-reminders:
    enabled: false
  authorization:
    # these are overridden by application-dev, -prod, -test, etc
    role-claim: dev_roles
    environment-name: "DEV"
  ordering-providers:
    states-not-required:
      - ND
  sendgrid:
    enabled: false
    from-email: support@simplereport.gov
    from-display-name: SimpleReport Support (CDC)
    account-request-recipient:
      - support@simplereport.gov
    waitlist-recipient:
      - support@simplereport.gov
    outreach-mailing-list-recipient:
      - tof4@cdc.gov
    dynamic-templates:
      # The templates are added and edited at: https://mc.sendgrid.com/dynamic-templates
      # The keys in this map should match (but don't have to) the names of SendGrid Dynamic Templates that
      # are in the web app, but *must* have a corresponding entry in the enum `EmailProviderTemplate`.
      # The values of the map are the GUID value for the Dynamic Template (also found in the SendGrid web
      # app).  New versions of the template do not change this value.
      ACCOUNT_REQUEST: d-7b0c7810ce5643f295e169f38b8db015
      ID_VERIFICATION_FAILED: d-b629fce77d604a31a2872746674cf08e
      ORGANIZATION_ID_VERIFICATION_REMINDER: d-609321a63983416face1b032599202a4
      SIMPLE_REPORT_TEST_RESULT: d-5ce0fdd4d4614ea498026a54ec28b529
      SIMPLE_REPORT_PATIENT_UPLOAD: d-80f49f78c1ab4c88bf71b187e5d5f64b
      SIMPLE_REPORT_PATIENT_UPLOAD_ERROR: d-e7c9f285539b49fab70c6dc185a5246c
  experian:
    enabled: false
    token-endpoint: ${EXPERIAN_TOKEN_ENDPOINT}
    initial-request-endpoint: ${EXPERIAN_INITIAL_REQUEST_ENDPOINT}
    domain: ${EXPERIAN_DOMAIN}
    client-id: ${EXPERIAN_CLIENT_ID}
    client-secret: ${EXPERIAN_CLIENT_SECRET}
    crosscore-subscriber-subcode: ${EXPERIAN_CC_SUBSCRIBER_SUBCODE}
    crosscore-username: ${EXPERIAN_CC_USERNAME}
    crosscore-password: ${EXPERIAN_CC_PASSWORD}
    preciseid-tenant-id: ${EXPERIAN_PID_TENANT_ID}
    preciseid-client-reference-id: ${EXPERIAN_PID_CLIENT_REFERENCE_ID}
    preciseid-username: ${EXPERIAN_PID_USERNAME}
    preciseid-password: ${EXPERIAN_PID_PASSWORD}
  azure-reporting-queue:
    enabled: false
    fhir-queue-enabled: false
    exception-webhook-enabled: false
    exception-webhook-token: ${RS_QUEUE_CALLBACK_TOKEN}
    name: ${AZ_REPORTING_QUEUE_NAME:test-event-publishing}
    fhir-queue-name: ${AZ_FHIR_REPORTING_QUEUE_NAME:fhir-data-publishing}
    connection-string: ${AZ_REPORTING_QUEUE_CXN_STRING}
  cors:
    allowed-methods:
      - GET
      - HEAD
      - POST
  batch-size: 1000
  fhir-reporting-enabled: true
  support-escalation:
    enabled: false
  production:
    backend-url: ${SR_PROD_BACKEND_URL:http://localhost:8080}
    devices-token: ${SR_PROD_DEVICES_TOKEN:sr-prod-devices-fake-token}
    device-sync-enabled: true
twilio:
  messaging-service-sid: ${TWILIO_MESSAGING_SID}
logging:
  queueSize: 500
  pattern:
    console: "{\"time\": \"%d{yyyy-MM-dd HH:mm:ss.SSS}\", \"org-id\": \"%X{org-id}\", \"api-user\": \"%X{api-user}\", \"level\": \"%p\", \"source\": \"%logger{39}:%L\", \"message\": \"%replace(%m%wEx){'[\r\n]+', '\\n'}%nopex\"}%n"
    json-log: "{\"time\": \"%d{yyyy-MM-dd HH:mm:ss.SSS}\", \"org-id\": \"%X{org-id}\", \"api-user\": \"%X{api-user}\", \"level\": \"%p\", \"source\": \"%logger{39}:%L\", \"message\": %replace(%m%wEx){'[\r\n]+', '\\n'}%nopex}%n"
hibernate.query.interceptor.error-level: ERROR
datahub:
  url: ${DATAHUB_URL:http://localhost:9561}
  api-key: ${DATAHUB_API_KEY:super-secret-api-key}
  api-version: "2021-09-21"
  jwt-scope: "simple_report.*.report"
  signing-key: ${DATAHUB_SIGNING_KEY:super-secret-signing-key}
  csv-upload-api-client: "simple_report.csvuploader"
  csv-upload-api-fhir-client: "simple_report.fullelr-bulkuploader"
aphl:
  tes:
    api-key: ${APHL_TES_API_KEY:super-secret-api-key}
    url: "https://tes.tools.aimsplatform.org/api/fhir"
loinc-fhir:
  username: ${LOINC_FHIR_API_USERNAME:simple-report-user}
  password: ${LOINC_FHIR_API_PASSWORD:super-secret-password}
  url: "https://fhir.loinc.org"
umls:
  api-key: ${UMLS_API_KEY:super-secret-api-key}
aims:
  access-key-id: ${AIMS_ACCESS_KEY_ID}
  secret-access-key: ${AIMS_SECRET_ACCESS_KEY}
  encryption-key: ${AIMS_KMS_ENCRYPTION_KEY}
  s3-bucket-name: ${AIMS_S3_BUCKET_NAME}
  user-id: ${AIMS_USER_ID}
  outbound-endpoint: ${AIMS_OUTBOUND_ENDPOINT}
  message-queue-endpoint: ${AIMS_MESSAGE_QUEUE_ENDPOINT}
features:
  oktaMigrationEnabled: false
  chlamydiaEnabled: true
  gonorrheaEnabled: true
  hepatitisCEnabled: true
  syphilisEnabled: true
  hivEnabled: true
  universalReportingEnabled: true
  aimsReportingEnabled: false
slack:
  hook:
    token: ${SLACK_HOOK_TOKEN:foo}
