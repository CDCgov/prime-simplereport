x-ref-data:
  type-defs:
    - &idtype uuid
    - &string text
  column-defs:
    - column: &pk_column
        name: internal_id
        type: *idtype
        remarks: The internal database identifier for this entity.
        constraints:
          primaryKey: true
          nullable: false
    - column: &created_at_column
        name: created_at
        type: DATETIME
        remarks: The creation timestamp for this entity.
        constraints:
          nullable: false
    - column: &updated_at_column
        name: updated_at
        type: DATETIME
        remarks: The timestamp for the most recent update of this entity.
        constraints:
          nullable: false
    - column: &created_by_column
        name: created_by
        type: *idtype
        remarks: The user who created this entity.
        constraints:
          nullable: false
          foreignKeyName: fk__anyentity__created_by # normally we make these unique, but that's a lot of boilerpate
          references: api_user
    - column: &updated_by_column
        name: updated_by
        type: *idtype
        remarks: The user who most recently updated this entity.
        constraints:
          nullable: false
          references: api_user
          foreignKeyName: fk__anyentity__updated_by
    - column: &soft_delete_column
        name: is_deleted
        type: boolean
        remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
        constraints:
          nullable: false
databaseChangeLog:
  - property:
      name: migrations_user_email
      value: db-migrations@simplereport.gov
  - changeSet:
      id: create-pgcrypto-extension
      author: josh@skylight.digital
      comment: Make sure we create the pgcrypto extension before beginning migrations.
      changes:
        - sql:
            sql: CREATE EXTENSION IF NOT EXISTS pgcrypto;
      rollback:
        - sql:
            sql: DROP EXTENSION pgcrypto;
  - changeSet:
      id: define-enum-types
      author: bwarfield@cdc.gov
      comment: Type definitions for our initial tables.
      changes:
        - sql:
            remarks: Create the enumerations needed for tracking test orders.
            # these may need to be tweaked if we ever might care about their sort order
            sql: |
              CREATE TYPE ${database.defaultSchemaName}.TEST_ORDER_STATUS as ENUM('PENDING', 'COMPLETED', 'CANCELED');
              CREATE TYPE ${database.defaultSchemaName}.TEST_RESULT as ENUM('POSITIVE','NEGATIVE','UNDETERMINED');
      rollback:
        sql: |
          DROP TYPE ${database.defaultSchemaName}.TEST_ORDER_STATUS;
          DROP TYPE ${database.defaultSchemaName}.TEST_RESULT;
  - changeSet:
      id: initial-schema
      author: bwarfield@cdc.gov
      comment: The database schema required for the initial deployment of the Simple Report API.
      changes:
        - createTable:
            tableName: api_user
            remarks: Any user who authenticates to the API to take actions using it.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: login_email
                  type: *string
                  remarks: The e-mail of the logged-in user, assuming that is our unique ID for users.
                  constraints:
                    unique: true
                    nullable: false
              - column:
                  name: last_seen
                  type: DATETIME
                  remarks: The last time this user connected to the API.
                  constraints:
                    nullable: false
              - column:
                  name: first_name
                  remarks: The user's given name, if any (to be derived from authentication claims).
                  type: *string
              - column:
                  name: middle_name
                  remarks: The user's middle name, if any (to be derived from authentication claims).
                  type: *string
              - column:
                  name: last_name
                  remarks: The user's family name or only name (to be derived from authentication claims).
                  type: *string
                  constraints:
                    nullable: false
              - column:
                  name: suffix
                  remarks: The generational or positional designation appended to the user's name.
                  type: *string
        - createTable:
            tableName: device_type
            remarks: Testing devices that may be present.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  constraints:
                    nullable: false
              - column:
                  name: name
                  type: *string
                  remarks: The name of the device, as displayed in isolation
                  constraints:
                    nullable: false
                    unique: true
                    uniqueConstraintName: uk__device_type
              - column:
                  name: loinc_code
                  type: *string
                  remarks: The LOINC code for this device, for reporting purposes (sadly, not unique)
                  constraints:
                    nullable: false
              - column:
                  name: manufacturer
                  remarks: The manufacturer of the device.
                  type: *string
              - column:
                  name: model
                  type: *string
                  remarks: The device model name.
        - createTable:
            tableName: provider
            remarks: A provider who can (we hope) write test orders.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  constraints:
                    nullable: false
              - column:
                  name: first_name
                  remarks: The provider's given name, if any.
                  type: *string
              - column:
                  name: middle_name
                  remarks: The provider's middle name, if any.
                  type: *string
              - column:
                  name: last_name
                  remarks: The provider's family name or only name.
                  type: *string
                  constraints:
                    nullable: false
              - column:
                  name: suffix
                  remarks: generational or positional designations appended to the provider's name
                  type: *string
              - column:
                  name: provider_id
                  remarks: The external ID (NPI) for this provider.
                  type: *string
                  constraints:
                    nullable: false
              - column:
                  name: street
                  remarks: The street portion of the person's address.
                  type: "text[]"
              - column:
                  name: city
                  remarks: The city of the provider's address.
                  type: *string
              - column:
                  name: county
                  remarks: The county (NOT THE COUNTRY) of the provider's address, if applicable.
                  type: *string
              - column:
                  name: state
                  remarks: The state or province of the provider's address.
                  type: *string
              - column:
                  name: postal_code
                  remarks: The zip/postal code of the provider's address.
                  type: *string
              - column:
                  name: telephone
                  remarks: The provider's contact phone number.
                  type: *string
        - createTable:
            tableName: organization
            remarks: A site where testing occurs, and also the main user grouping entity.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  constraints:
                    nullable: false
              - column:
                  name: facility_name
                  type: *string
                  remarks: The human-readable name for this facility.
                  constraints:
                    nullable: false
                    unique: true
                    uniqueConstraintName: uk__facility__name
              - column:
                  name: organization_external_id
                  type: *string
                  remarks: The external ID of the organization, for authorization purposes.
                  constraints:
                    nullable: false
                    unique: true
                    uniqueConstraintName: uk__facility__organization_id
              - column:
                  name: clia_number
                  type: *string # irony
                  remarks: The CLIA number for the facility that is ordering (and presumably also conducting) the tests.
                  constraints:
                    nullable: false
              - column:
                  name: default_device_type
                  remarks: The default device type (if any) for tests at this facility.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__organization__default_device_type
                    references: device_type
              - column:
                  name: ordering_provider_id
                  type: *idtype
                  remarks: at what point does this blow up on me?
                  constraints:
                    nullable: false
                    foreignKeyName: fk__organization__ordering_provider
                    references: provider
        - createTable:
            tableName: facility_device_type
            remarks: Many-to-many table for device configuration at a facility.
            columns:
              - column:
                  name: organization_id
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility_device_type__organization
                    references: organization
              - column:
                  name: device_type_id
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility_device_type__device_type
                    references: device_type
        - createTable:
            tableName: person
            remarks: The personal information we store about users and patients
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  constraints:
                    nullable: false
              - column:
                  name: organization_id
                  remarks: Foreign key to the facility/organization responsible for entering this person's information.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__person__organization
                    references: organization
              - column:
                  name: first_name
                  remarks: The person's given name, if any.
                  type: *string
              - column:
                  name: middle_name
                  remarks: The person's middle name, if any.
                  type: *string
              - column:
                  name: last_name
                  remarks: The person's family name or only name.
                  type: *string
                  constraints:
                    nullable: false
              - column:
                  name: suffix
                  remarks: The generational or positional designations appended to the person's name.
                  type: *string
              - column:
                  name: race
                  remarks: grouping of humans based on shared physical or social qualities
                  type: "text[]"
              - column:
                  name: gender
                  remarks: biological sex
                  type: *string
              - column:
                  name: ethnicity
                  remarks: ethnic group
                  type: *string
              - column:
                  name: lookup_id
                  remarks: user entered. hopefully unique. patient identifier used for patient search
                  type: *string
              - column:
                  name: birth_date
                  remarks: The person's date of birth.
                  type: DATE
                  constraints:
                    nullable: true
              - column:
                  name: street
                  remarks: The street portion of the person's address.
                  type: "text[]"
              - column:
                  name: city
                  remarks: The city of the person's address.
                  type: *string
              - column:
                  name: county
                  remarks: The county (NOT THE COUNTRY) of the person's address, if applicable.
                  type: *string
              - column:
                  name: state
                  remarks: The state or province of the person's address.
                  type: *string
              - column:
                  name: postal_code
                  remarks: The zip/postal code of the person's address.
                  type: *string
              - column:
                  name: telephone
                  remarks: The person's contact phone number.
                  type: *string
              - column:
                  name: email
                  remarks: The person's contact email.
                  type: *string
              - column:
                  name: employed_in_healthcare
                  remarks: Is the person employed in healthcare?
                  type: boolean
              - column:
                  name: role
                  remarks: The person's role at the facility where they are tested (e.g. "staff", "visitor", "resident").
                  type: *string
              - column:
                  name: resident_congregate_setting
                  remarks: Does the person live in a congregate setting?
                  type: boolean
        - createTable:
            tableName: patient_answers
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: ask_on_entry
                  type: jsonb
                  remarks: The questions asked at order entry or at test time.
        - createTable:
            tableName: test_event
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: patient_id
                  remarks: The person who is being given the test.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__test_event__patient__person
                    references: person
              - column:
                  name: organization_id
                  remarks: Foreign key to the facility/organization responsible for entering this person's information.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__test_event__organization
                    references: organization
              - column:
                  name: device_type_id
                  remarks: The device used to record the test result.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__test_event__device_type
                    references: device_type
              - column:
                  name: patient_data
                  type: jsonb
                  remarks: The patient's demographics and address at the time the test was administered.
              - column:
                  name: provider_data
                  type: jsonb
                  remarks: The name and contact of the provider who ordered the test.
              - column:
                  name: result
                  remarks: The result of the test, once it has been given.
                  type: ${database.defaultSchemaName}.TEST_RESULT
        - createTable:
            tableName: test_order
            remarks: Test orders, whether pending, completed or canceled.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: created_by
                  type: *idtype
                  remarks: The user who created this entity.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__anyentity__created_by
                    references: api_user
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_by
                  type: *idtype
                  remarks: The user who most recently updated this entity.
                  constraints:
                    nullable: false
                    references: api_user
                    foreignKeyName: fk__anyentity__updated_by
              - column:
                  name: patient_id
                  remarks: The person who is being given the test.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__test_order__patient__person
                    references: person
              - column:
                  name: organization_id
                  remarks: Foreign key to the facility/organization responsible for entering this person's information.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__test_order__organization
                    references: organization
              - column:
                  name: patient_answers_id
                  remarks: The questions asked at order entry or at test time.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__test_order__patient_answers
                    references: patient_answers
              - column:
                  name: device_type_id
                  remarks: The device used to record the test result
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__test_order__device_type
                    references: device_type
              - column:
                  name: date_tested
                  remarks: the date the test result was submitted
                  type: DATE
                  constraints:
                    nullable: true
              - column:
                  name: order_status
                  remarks: The status of the order. "Pending" orders are the test queue; "COMPLETED" orders have results.
                  type: ${database.defaultSchemaName}.TEST_ORDER_STATUS
                  constraints:
                    nullable: false
              - column:
                  name: result
                  remarks: The result of the test, once it has been given.
                  type: ${database.defaultSchemaName}.TEST_RESULT
              - column:
                  name: test_event_id
                  type: *idtype
                  remarks: Data saved at the time the test is marked completed.
                  constraints:
                    nullable: true
                    unique: true
                    foreignKeyName: fk__test_order__test_event
                    references: test_event
                    uniqueKeyName: uk__test_order__test_event
  - changeSet:
      id: enforce-queue-uniqueness
      author: bwarfield@cdc.gov
      comment: Enforce uniqueness guarantees for patients in the queue.
      changes:
        - sql:
            remarks: Create a unique index on organization and patient, but only for PENDING orders.
            sql: |
              CREATE UNIQUE INDEX uk__test_order__organization_person_pending
              ON ${database.defaultSchemaName}.test_order (organization_id, patient_id)
              WHERE order_status = 'PENDING'
      rollback:
        sql: |
          DROP INDEX ${database.defaultSchemaName}.uk__test_order__organization_person_pending;
  - changeSet:
      id: single-race-select
      author: tbest@cdc.gov
      comment: Allow a single race selection because of HL7 only allows a single race
      changes:
        - sql:
            sql: |
              ALTER TABLE ${database.defaultSchemaName}.person
              ALTER COLUMN race TYPE text
              USING race[1];
      rollback:
        - sql:
            sql: |
              ALTER TABLE ${database.defaultSchemaName}.person
              ALTER COLUMN race TYPE text[]
              USING ARRAY[race];
  - changeSet:
      id: add-facility-table
      author: bwarfield@cdc.gov
      comment: Introduce the facility table, which takes over much of the data in the organization table
      changes:
        - createTable:
            tableName: facility
            remarks: A site where testing occurs (may be called "site" in user-facing language).
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column: *soft_delete_column
              - column:
                  name: organization_id
                  remarks: Foreign key to the organization that this facility belongs to.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility__organization
                    references: organization
              - column:
                  name: facility_name
                  type: *string
                  remarks: The human-readable name for this facility.
                  constraints:
                    nullable: false
              - column:
                  name: clia_number
                  type: *string # irony
                  remarks: The CLIA number for the facility that is ordering (and presumably also conducting) the tests.
              - column:
                  name: default_device_type_id
                  remarks: The default device type (if any) for tests at this facility.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__facility__default_device_type
                    references: device_type
              - column:
                  name: ordering_provider_id
                  type: *idtype
                  remarks: The healthcare provider who orders tests at this facility.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility__ordering_provider
                    references: provider
              - column:
                  name: street
                  remarks: The street portion of the facility address.
                  type: "text[]"
              - column:
                  name: city
                  remarks: The city of the facility address.
                  type: *string
              - column:
                  name: county
                  remarks: The county (NOT THE COUNTRY) of the facility address, if applicable.
                  type: *string
              - column:
                  name: state
                  remarks: The state or province of the facility address.
                  type: *string
              - column:
                  name: postal_code
                  remarks: The zip/postal code of the facility address.
                  type: *string
              - column:
                  name: telephone
                  remarks: The facility's contact phone number.
                  type: *string
        - addUniqueConstraint:
            tableName: facility
            constraintName: uk__facility__organization_facility_name
            columnNames: organization_id, facility_name
  - changeSet:
      id: populate-facility-table
      author: bwarfield@cdc.gov
      comment: Populate facilities table based on existing organizations.
      preConditions:
        - onSqlOutput: FAIL
        - onFail: MARK_RAN
        - sqlCheck:
            sql: SELECT case when count(1) > 0 then 1 else 0 end FROM ${database.defaultSchemaName}.organization;
            expectedResult: 1
      changes:
        - sql:
            comment: Populate the facilities table from the organization table
            sql: |
              INSERT INTO ${database.defaultSchemaName}.facility (
                internal_id,
                organization_id,
                created_at, created_by, updated_at, updated_by, is_deleted,
                facility_name, clia_number,
                ordering_provider_id,
                default_device_type_id
              )
              SELECT
                gen_random_uuid(),
                internal_id,
                created_at, created_by, updated_at, updated_by, is_deleted,
                facility_name, clia_number,
                ordering_provider_id,
                default_device_type
              FROM ${database.defaultSchemaName}.organization;
  - changeSet:
      id: add-facility-relationships
      author: bwarfield@cdc.gov
      comment: Add relationships and otherwise modify other tables in the schema to reflect the existence of facilities.
      # we may want a check constraint on patient.facility (and arguably
      # test_order.facility and test_event.facility as well) to make sure that
      # the facility belongs to the correct organization
      changes:
        - dropConstraint:
            tableName: organization
            constraintName: uk__facility__name
        - renameColumn:
            tableName: organization
            oldColumnName: facility_name
            newColumnName: organization_name
            remarks: The human-readable name for this organization.
        - addUniqueConstraint:
            tableName: organization
            constraintName: uk__organization__organization_name
            columnNames: organization_name
        - addColumn:
            tableName: person
            columns:
              - column:
                  name: facility_id
                  afterColumn: organization_id
                  type: *idtype
                  valueComputed: (select internal_id from ${database.defaultSchemaName}.facility f where f.organization_id = organization_id)
                  remarks: The facility where this person is expected to be tested (null if they will be tested at multiple sites)
                  constraints:
                    nullable: true
                    foreignKeyName: fk__person__facility
                    referencedTableName: facility
        - addColumn:
            tableName: test_event
            columns:
              - column:
                  name: facility_id
                  afterColumn: organization_id
                  type: *idtype
                  remarks: The facility where this test took place.
                  valueComputed: (select internal_id from ${database.defaultSchemaName}.facility f where f.organization_id = organization_id)
                  constraints:
                    foreignKeyName: fk__test_event__facility
                    referencedTableName: facility
        - addNotNullConstraint:
            tableName: test_event
            columnName: facility_id
        - addColumn:
            tableName: test_order
            columns:
              - column:
                  name: facility_id
                  afterColumn: organization_id
                  type: *idtype
                  remarks: The facility where this test was ordered.
                  valueComputed: (select internal_id from ${database.defaultSchemaName}.facility f where f.organization_id = organization_id)
                  constraints:
                    foreignKeyName: fk__test_order__facility
                    referencedTableName: facility
        - addNotNullConstraint:
            tableName: test_order
            columnName: facility_id
        - addColumn:
            tableName: facility_device_type
            columns:
              - column:
                  name: facility_id
                  afterColumn: organization_id
                  type: *idtype
                  valueComputed: (select internal_id from ${database.defaultSchemaName}.facility f where f.organization_id = organization_id)
                  constraints:
                    foreignKeyName: fk__facility_device_type__facility
                    referencedTableName: facility
        - addNotNullConstraint:
            tableName: facility_device_type
            columnName: facility_id
        - dropColumn:
            tableName: facility_device_type
            columnName: organization_id
        - dropColumn:
            tableName: organization
            columns:
              - column:
                  name: clia_number
              - column:
                  name: default_device_type
              - column:
                  name: ordering_provider_id
  - changeSet:
      id: date-tested-backdate
      author: tbest@cdc.gov
      comment: add timestamp for date corrections
      changes:
        - addColumn:
            tableName: test_order
            columns:
              - column:
                  name: date_tested_backdate
                  type: DATETIME
                  remarks: timestamp to store a user correction to when the test was ordered
  - changeSet:
      id: add-facility-email
      author: nclyde@skylight.digital
      comment: add email field to facility
      changes:
        - addColumn:
            tableName: facility
            columns:
              - column:
                  name: email
                  type: *string
                  remarks: The facility's contact email address.
  - changeSet:
      id: add-data-hub-upload
      author: tnielsen2@cdc.gov
      comment: Add data_hub_upload table used to the automated results uploader.
      changes:
        - sql:
            remarks: Create the enumerations needed for DataHubUpload.
            sql: |
              CREATE TYPE ${database.defaultSchemaName}.DATA_HUB_UPLOAD_STATUS as ENUM('IN_PROGRESS', 'SUCCESS', 'FAIL');
            rollback:
              sql: |
                DROP TYPE ${database.defaultSchemaName}.DATA_HUB_UPLOAD_STATUS;
        - createTable:
            tableName: data_hub_upload
            remarks: Track uploads and results of test_events to the data-hub.
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: job_status
                  type: ${database.defaultSchemaName}.DATA_HUB_UPLOAD_STATUS
                  remarks: State of this upload. Enumerated value.
                  constraints:
                    nullable: false
              - column:
                  name: created_at
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: updated_at
                  type: DATETIME
                  remarks: The timestamp for the most recent update of this entity.
                  constraints:
                    nullable: false
              - column:
                  name: records_processed
                  type: int
                  remarks: Number of rows sent to the server.
              - column:
                  name: error_message
                  type: text
                  remarks: Set if an exception happens.
              - column:
                  name: response_data
                  type: jsonb
                  remarks: Response json from data-hub.
              - column:
                  name: earliest_recorded_timestamp
                  type: DATETIME
                  remarks: Lowerbound timestamp used to collect test_events. Entities with created_by > this value are sent.
              - column:
                  name: latest_recorded_timestamp
                  type: DATETIME
                  remarks: Upperbounds timestamp used to collect test_event. Entities with created_by <= this value are sent.
        - createIndex:
            indexName: uk__data_hub_upload__job_status__latest_recorded_timestamp
            tableName: data_hub_upload
            clustered: true
            columns:
              - column:
                  name: job_status
              - column:
                  name: latest_recorded_timestamp
                  descending: true
  - changeSet:
      id: change-test-results-to-MST
      author: neil.s.sharma@omb.eop.gov
      comment: Change all existing backdated tests to be midnight MST instead of midnight UTC.
      changes:
        - sql:
            comment: Update backdated test_orders from UTC to MST.
            sql: |
              UPDATE ${database.defaultSchemaName}.test_order
              SET date_tested_backdate = date_tested_backdate + interval '7' HOUR
              WHERE date_tested_backdate is not null;

  - changeSet:
      id: drop-not-null-last-seen-user
      author: jeremy.a.zitomer@omb.eop.gov
      comment: Allow user's last seen timestamp to be null to allow for other people to create users
      # Allows us to create a user without having to assign it a last-seen value (ie if user does not create themselves)
      changes:
        - dropNotNullConstraint:
            tableName: api_user
            columnName: last_seen
  - changeSet:
      id: add-swab-type-to-device-type
      author: tbest@cdc.gov
      comment: add a property to store the swab type per device
      changes:
        - addColumn:
            tableName: device_type
            columns:
              - column:
                  name: swab_type
                  type: *string
                  remarks: The swab type used for this device
                  value: "445297001" # swab of internal nose
        - addNotNullConstraint:
            tableName: device_type
            columnName: swab_type
  - changeSet:
      id: event-corrections-feature
      author: tnielsen2@cdc.gov
      comment: Add columns to existing tables to handle the concept of corrections to test_events.
      changes:
        - sql:
            remarks: Create the enumerations for corrections_status in test_event table.
            sql: |
              CREATE TYPE ${database.defaultSchemaName}.TEST_CORRECTION_STATUS as ENUM('ORIGINAL', 'CORRECTED', 'REMOVED');
            rollback:
              sql: |
                DROP TYPE ${database.defaultSchemaName}.TEST_CORRECTION_STATUS;
        - addColumn:
            tableName: test_order
            columns:
              - column:
                  name: correction_status
                  type: ${database.defaultSchemaName}.test_correction_status
                  remarks: Enumeration of type of correction. This column is used for non-delete corrections.
                  defaultValue: "ORIGINAL"
                  value: "ORIGINAL"
                  constraints:
                    nullable: false
              - column:
                  name: reason_for_correction
                  type: text
                  remarks: User supplied comment when a correction happens.
        - addColumn:
            tableName: test_event
            columns:
              - column:
                  name: survey_data
                  type: jsonb
                  remarks: The patient's demographics and address at the time the test was administered.
              - column:
                  name: date_tested_backdate
                  type: DATETIME
                  remarks: Timestamp to store a user correction to when the test was ordered. Copied from TestOrder. Null if not backdated.
              - column:
                  name: test_order_id
                  type: *idtype
                  remarks: Reference to original test_order internal_id.
                  constraints:
                    foreignKeyName: fk__test_event__test_order
                    referencedTableName: test_order
              - column:
                  name: correction_status
                  type: ${database.defaultSchemaName}.test_correction_status
                  remarks: Enumeration of type of correction.
                  defaultValue: "ORIGINAL"
                  value: "ORIGINAL"
                  constraints:
                    nullable: false
              - column:
                  name: prior_corrected_test_event_id
                  type: *idtype
                  remarks: If this is a correction, this is the id the prior test_event being corrected.
                  constraints:
                    foreignKeyName: fk__test_event__prior_corrected_test_event
                    referencedTableName: test_event
              - column:
                  name: reason_for_correction
                  type: text
                  remarks: User supplied comment when a correction happens.
        - sql:
            remarks: Copy the existing test_order_id from test_order.
            sql: |
              UPDATE ${database.defaultSchemaName}.test_event TestEvent
              SET test_order_id = TestOrder.internal_id,
                  survey_data = PatientAnswers.ask_on_entry,
                  date_tested_backdate = TestOrder.date_tested_backdate
              FROM ${database.defaultSchemaName}.test_order TestOrder
                   INNER JOIN ${database.defaultSchemaName}.patient_answers PatientAnswers
                   ON TestOrder.patient_answers_id = PatientAnswers.internal_id
              WHERE TestOrder.test_event_id = TestEvent.internal_id;
        - addNotNullConstraint:
            tableName: test_event
            columnName: test_order_id
  - changeSet:
      id: add-patient-link-table
      author: nclyde@skylight.digital
      comment: The patient link table stores time-sensitive UUIDs granting patients access to answer time of test questions
      changes:
        - createTable:
            tableName: patient_link
            remarks: Time-sensitive UUIDs granting patients access to answer time of test questions
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column: *soft_delete_column
              - column:
                  name: test_order_id
                  remarks: The test order this link was generated for
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__patient_link__test_order
                    references: test_order
  - changeSet:
      id: add-refreshed-at-to-patient-link-table
      author: nclyde@skylight.digital
      comment: The patient link table stores time-sensitive UUIDs granting patients access to answer time of test questions
      changes:
        - addColumn:
            tableName: patient_link
            columns:
              - column:
                  name: refreshed_at
                  type: DATETIME
                  remarks: The timestamp for the most recent refresh of this entity.
  - changeSet:
      id: add-is-deleted-to-api-user
      author: jeremy.a.zitomer@omb.eop.gov
      comment: Add soft deletion flag to API users table
      changes:
        - addColumn:
            tableName: api_user
            # while we would love to use the proper (non-nullable) reference column below, there are
            # already records in this table and we cannot add default values to the existing reference
            # column without recreating it entirely
            columns:
              - column:
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  defaultValueBoolean: false
                  constraints:
                    nullable: false
  - changeSet:
      id: add-specimen-tables
      author: bwarfield@cdc.gov
      description: Introduce the tables necessary for tracking specimen types.
      changes:
        - createTable:
            tableName: specimen_type
            remarks: A type of specimen collection from a patient.
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column: *soft_delete_column
              - column:
                  name: name
                  type: *string
                  remarks: The name of this specimen type.
                  constraints:
                    nullable: false
                    unique: true
                    uniqueConstraintName: uk__specimen_type__name
              - column:
                  name: type_code
                  remarks: The SNOMED type code for this specimen type.
                  type: *string
                  constraints:
                    nullable: false
                    unique: true
                    uniqueConstraintName: uk__specimen_type__type_code
              - column:
                  name: collection_location_name
                  remarks: The collection location of this specimen type.
                  type: *string
              - column:
                  name: collection_location_code
                  remarks: The SNOMED code for the collection location of this specimen type.
                  type: *string
        - createTable:
            tableName: device_specimen_type
            remarks: A usable combination of device type and specimen type.
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column: *soft_delete_column
              - column:
                  name: device_type_id
                  remarks: The device type for this combination.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__device_specimen_type__device_type
                    references: device_type
              - column:
                  name: specimen_type_id
                  remarks: The specimen type for this combination.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__device_specimen_type__specimen_type
                    references: specimen_type
        - addUniqueConstraint:
            tableName: device_specimen_type
            constraintName: uk__device_specimen_type
            columnNames: device_type_id, specimen_type_id
        - createTable:
            tableName: facility_device_specimen_type
            remarks: Many-to-many table for device/specimen configuration at a facility.
            columns:
              - column:
                  name: facility_id
                  remarks: A facility at which this device/specimen combination is used.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility_device_specimen_type__facility
                    references: facility
              - column:
                  name: device_specimen_type_id
                  remarks: A device/specimen combination that is allowed to be used at the facility.
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__facility_device_specimen_type__device_specimen_type
                    references: device_specimen_type
        - addUniqueConstraint:
            tableName: facility_device_specimen_type
            constraintName: uk__facility_device_specimen_type
            columnNames: facility_id, device_specimen_type_id
        - addColumn:
            tableName: facility
            columns:
              - column:
                  name: default_device_specimen_type_id
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__facility__default_device_specimen_type
                    referencedTableName: device_specimen_type
        - addColumn:
            tableName: test_order
            columns:
              - column:
                  name: device_specimen_type_id
                  remarks: The device/specimen combination used to record the test result.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__test_order__device_specimen_type
                    referencedTableName: device_specimen_type
                    # will be made non-null in a subsequent migration
        - addColumn:
            tableName: test_event
            columns:
              - column:
                  name: device_specimen_type_id
                  remarks: The device/specimen combination used to record the test result.
                  type: *idtype
                  constraints:
                    foreignKeyName: fk__test_event__device_specimen_type
                    referencedTableName: device_specimen_type
                    # will be made non-null in a subsequent migration
  - changeSet:
      id: create-migrations-user
      author: bwarfield@cdc.gov
      comment: Create a system-level user to attribute migration insert/updates to.
      changes:
        - sql:
            remarks: Create migrations user to indicate records created by migration rather than by a human.
            sql: |
              INSERT INTO ${database.defaultSchemaName}.api_user
              (internal_id, created_at, updated_at, is_deleted, last_seen, login_email, last_name)
              VALUES (
                gen_random_uuid(), now(), now(), false, null,
                '${migrations_user_email}', 'Database Migration Process'
              )
  - changeSet:
      id: populate-specimen-tables
      author: bwarfield@cdc.gov
      comment: Populate specimen tables and relations based on existing data.
      validCheckSum: # yes there are two of them because liquibase checksums are not platform-independent LOLsob.
        - "8:824e942da27e8b5c9d965bf00d067d91" # Linux
        - "8:ab7979e21fd696979931d82120bcbfab" # MacOS
      preConditions:
        # run this migration only if there is at least one row in device_type. If there is not, mark it as already run.
        - onSqlOutput: FAIL
        - onFail: MARK_RAN
        - sqlCheck:
            sql: SELECT case when count(1) > 0 then 1 else 0 end FROM ${database.defaultSchemaName}.device_type;
            expectedResult: 1
      changes:
        - sql:
            remarks: Create in-use specimen types based on current device-type data.
            sql: |
              WITH swab_types_historical as (
                select distinct swab_type as type_code from ${database.defaultSchemaName}.device_type
              ),
              migration_user as (
                SELECT internal_id as migrations_user_id
                FROM ${database.defaultSchemaName}.api_user
                WHERE login_email = '${migrations_user_email}'
              )
              INSERT INTO ${database.defaultSchemaName}.specimen_type (name, type_code,
                internal_id, created_by, created_at, updated_by, updated_at, is_deleted)
              SELECT
                'Auto-generated specimen type ' || type_code,
                type_code,
                gen_random_uuid(),
                migrations_user_id,
                now(),
                migrations_user_id,
                now(),
                false
              FROM swab_types_historical cross join migration_user
        - sql:
            remarks: Add device_specimen_type entries based on current device-type data.
            sql: |
              WITH device_swab_historical as (
                SELECT dt.internal_id device_type_id, swt.internal_id specimen_type_id
                FROM ${database.defaultSchemaName}.device_type dt
                 JOIN ${database.defaultSchemaName}.specimen_type swt ON dt.swab_type = swt.type_code
              ),
              migration_user as (
                SELECT internal_id as migrations_user_id
                FROM ${database.defaultSchemaName}.api_user
                WHERE login_email = '${migrations_user_email}'
              )
              INSERT INTO ${database.defaultSchemaName}.device_specimen_type
              ( internal_id,
                created_at, created_by, updated_at, updated_by, is_deleted,
                device_type_id, specimen_type_id
              )
              SELECT
                gen_random_uuid(),
                now(), migrations_user_id, now(), migrations_user_id, false,
                device_type_id, specimen_type_id
              FROM device_swab_historical cross join migration_user;
        - sql:
            remarks: Populate facility_device_specimen_type table and (default) device_specimen_type_id columns in facility, test_type and test_order.
            sql: |
              INSERT INTO ${database.defaultSchemaName}.facility_device_specimen_type
              (facility_id, device_specimen_type_id)
              SELECT DISTINCT facility_id, ds.internal_id
              FROM ${database.defaultSchemaName}.facility_device_type
                JOIN ${database.defaultSchemaName}.device_specimen_type ds using(device_type_id);

              UPDATE ${database.defaultSchemaName}.facility f
              SET default_device_specimen_type_id = ds.internal_id
              FROM ${database.defaultSchemaName}.device_specimen_type ds
              WHERE ds.device_type_id = f.default_device_type_id;

              UPDATE ${database.defaultSchemaName}.test_order t
              SET device_specimen_type_id = ds.internal_id
              FROM ${database.defaultSchemaName}.device_specimen_type ds
              WHERE ds.device_type_id = t.device_type_id;

              UPDATE ${database.defaultSchemaName}.test_event t
              SET device_specimen_type_id = ds.internal_id
              FROM ${database.defaultSchemaName}.device_specimen_type ds
              WHERE ds.device_type_id = t.device_type_id;
  - changeSet:
      id: test-order-fixup
      author: bwarfield@cdc.gov
      comment: Populate test_order.device_type_id and device_specimen_type_id with a default when it was previously left empty.
      preConditions:
        # run this migration only if there is at least one row in test_order with no device_type_id.
        - onSqlOutput: FAIL
        - onFail: MARK_RAN
        - sqlCheck:
            sql: SELECT case when count(1) > 0 then 1 else 0 end FROM ${database.defaultSchemaName}.test_order WHERE device_type_id is null;
            expectedResult: 1
      changes:
        - sql:
            remarks: Populate the device_type_id and device_specimen_type_id for test orders with the default_device_type_id from their facility.
            sql: |
              UPDATE ${database.defaultSchemaName}.test_order t
              SET device_type_id = f.default_device_type_id,
                device_specimen_type_id = f.default_device_specimen_type_id
              FROM ${database.defaultSchemaName}.facility f
              WHERE f.internal_id = t.facility_id
              AND t.device_type_id is null
  - changeSet:
      id: complete-specimen-column-additions
      author: bwarfield@cdc.gov
      comment: Update constraints for newly-added columns referencing device_specimen_type.
      changes:
        - addNotNullConstraint:
            tableName: test_event
            columnName: device_specimen_type_id
        - addNotNullConstraint:
            tableName: test_order
            columnName: device_specimen_type_id
  - changeSet:
      id: add-time-of-consent-table
      author: nclyde@skylight.digital
      comment: Add a table which stores the time at which patients accept the terms of consent for patient links
      changes:
        - createTable:
            tableName: time_of_consent
            remarks: This table stores the time at which patients accept the terms of consent for patient links
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *updated_at_column
              - column:
                  name: patient_link_id
                  remarks: The patient link that was consented to
                  type: *idtype
                  constraints:
                    nullable: false
                    foreignKeyName: fk__patient_link__time_of_consent
                    references: patient_link
  - changeSet:
      id: add-audit-event-table
      author: bwarfield@cdc.gov
      comment: Add table for API request auditing.
      changes:
        - createTable:
            tableName: api_audit_event
            remarks: An API access event that we record for HIPAA auditing.
            columns:
              - column:
                  name: id
                  type: *idtype
                  remarks: The internal database identifier for this audit event.
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: event_timestamp
                  type: DATETIME
                  remarks: The creation timestamp for this entity.
                  constraints:
                    nullable: false
              - column:
                  name: request_id
                  remarks: The correlation ID from the application logs.
                  type: *string
              - column:
                  name: http_request_details
                  remarks: Key details of the HTTP request.
                  type: jsonb
                  constraints:
                    nullable: false
              - column:
                  name: graphql_query_details
                  remarks: Lightly structured information about the graphql request.
                  type: jsonb
              - column:
                  name: graphql_error_paths
                  remarks: The list of paths in the graphql response that had errors (usually empty).
                  type: "text[]"
              - column:
                  name: api_user_id
                  type: *idtype
                  remarks: The user who performed this action.
                  constraints:
                    nullable: false
                    foreignKeyName: fk__api_audit_event__api_user
                    references: api_user
              - column:
                  name: is_admin_user
                  type: boolean
                  remarks: Was the user a site administrator at the time the request was made.
                  constraints:
                    nullable: false
              - column:
                  name: user_permissions
                  remarks: The permissions attached to the user when the request was made.
                  type: "text[]"
              - column:
                  name: organization_id
                  type: *idtype
                  remarks: The organization within which this request was performed (if applicable).
                  constraints:
                    nullable: true
                    foreignKeyName: fk__api_audit_event__organization
                    references: organization
              - column:
                  name: patient_link_id
                  type: *idtype
                  remarks: The "magic" patient link that the patient used to perform this action (if applicable).
                  constraints:
                    nullable: true
                    foreignKeyName: fk__api_audit_event__patient_link
                    references: patient_link
  - changeSet:
      id: rename-patient_link-refreshed_at
      author: adam@skylight.digital
      comment: Rename patient_link.refreshed_at to expires_at
      changes:
        - renameColumn:
            tableName: patient_link
            oldColumnName: refreshed_at
            newColumnName: expires_at
        - sql:
            remarks: Add 24hs to the timestamps, because that was the default expiry
            sql: |
              UPDATE ${database.defaultSchemaName}.patient_link pl SET expires_at = pl.created_at WHERE expires_at is null; 
              UPDATE ${database.defaultSchemaName}.patient_link pl SET expires_at = pl.expires_at + interval '1 day';
      rollback:
        - renameColumn:
            tableName: patient_link
            oldColumnName: expires_at
            newColumnName: refreshed_at
        - sql:
            sql: |
              UPDATE ${database.defaultSchemaName}.patient_link pl SET refreshed_at = pl.refreshed_at - interval '1 day';
  - changeSet:
      id: add-patient_link_failed_attempt
      author: nclyde@skylight.digital
      comment: Adds a non-audited join table to patient_link that tracks the number of failed attempts to authenticate
      changes:
        - createTable:
            tableName: patient_link_failed_attempt
            remarks: A non-audited join table to patient_link that tracks the number of failed attempts to authenticate
            columns:
              - column:
                  name: patient_link_internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity, and a foreign key to patient_link
                  constraints:
                    primaryKey: true
                    nullable: false
                    foreignKeyName: fk__failed_attempts__patient_link
                    references: patient_link
              - column:
                  name: failed_attempts
                  type: tinyint
                  valueNumeric: 0
                  defaultValueNumeric: 0
                  constraints:
                    nullable: false
  - changeSet:
      id: add-test-result-preferences
      author: adam@skylight.digital
      comment: Add column to Person for test result delivery preferences
      changes:
        - sql:
            remarks: Create an enum for test result delivery
            sql: |
              CREATE TYPE ${database.defaultSchemaName}.TEST_RESULT_DELIVERY as ENUM('SMS', 'NONE');
        - addColumn:
            tableName: person
            columns:
              - column:
                  name: test_result_delivery
                  type: ${database.defaultSchemaName}.TEST_RESULT_DELIVERY
                  remarks: Tracks the individual's preference for receiving test results
      rollback:
        - dropColumn:
            tableName: person
            columns:
              - column:
                  name: test_result_delivery
        - sql:
            remarks: Drop enum for test result delivery
            sql: |
              DROP TYPE ${database.defaultSchemaName}.TEST_RESULT_DELIVERY;
  - changeSet:
      id: audit-http-response-codes
      author: bwarfield@cdc.gov
      comment: Add HTTP response code column to api_audit_event.
      changes:
        - addColumn:
            tableName: api_audit_event
            columns:
              - column:
                  name: response_code
                  type: int
                  remarks: The HTTP response code for this request (generally only interesting for REST requests).
                  valueNumeric: 200 # backdate
                  defaultValueNumeric: 200
                  constraints:
                    nullable: false
  - changeSet:
      id: add-tribal-affiliation
      author: adam@skylight.digital
      comment: Add Tribal Affiliation to Person
      changes:
        - addColumn:
            tableName: person
            columns:
              - column:
                  name: tribal_affiliation
                  type: jsonb
                  remarks: JSON list of strings (but actually numeric value mappings to PRIME Data Hub's Tribal Affiliation valueset)
  - changeSet:
      id: add-patient-preferences
      author: adam@skylight.digital
      comment: Add table for non-demographic preferences relating to a Person
      changes:
        - createTable:
            tableName: patient_preferences
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier of the Person to whom these preferences belong
                  constraints:
                    foreignKeyName: fk__patient_preferences__person
                    references: person
                    primaryKey: true
                    nullable: false
              - column:
                  name: preferred_language
                  type: *string
                  remarks: Tracks the individual's preferred language
              - column:
                  name: test_result_delivery
                  type: ${database.defaultSchemaName}.TEST_RESULT_DELIVERY
                  remarks: Tracks the individual's preference for receiving test results
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
  - changeSet:
      id: populate-patient-preferences
      author: adam@skylight.digital
      comment: Migrate person.test_result_delivery to into patient_preferences
      changes:
        - sql:
          sql: |
            WITH migration_user as (
              SELECT internal_id as migrations_user_id
              FROM ${database.defaultSchemaName}.api_user
              WHERE login_email = '${migrations_user_email}')
            INSERT INTO ${database.defaultSchemaName}.patient_preferences (
                internal_id, preferred_language, test_result_delivery,
                created_at, created_by, updated_at, updated_by)
            SELECT
              person.internal_id internal_id,
              NULL preferred_language,
              test_result_delivery,
              now() created_at,
              migrations_user_id created_by,
              now() updated_at,
              migrations_user_id updated_by
            FROM ${database.defaultSchemaName}.person CROSS JOIN migration_user
            WHERE test_result_delivery IS NOT NULL;
  - changeSet:
      id: add-org-verified
      author: jeremy.a.zitomer@omb.eop.gov
      comment: Add a required boolean column to the organization table named identity_verified, existing records set to true.
      changes:
        - addColumn:
            tableName: organization
            columns:
              - column:
                  name: identity_verified
                  type: boolean
                  remarks: Whether this organization's identity has been verified.
                  valueBoolean: true
                  defaultValueBoolean: true
                  constraints:
                    nullable: false
  - changeSet:
      id: add-test-length
      author: emma@skylight.digital
      comment: Add test length column to the device type table. Test length will be based on the model used.
      changes:
        - addColumn:
            tableName: device_type
            columns:
              - column:
                  name: test_length
                  type: int
                  remarks: The length (in minutes) that the test will take.
                  defaultValueNumeric: 15
                  valueComputed: (CASE WHEN name like '%CareStart%' THEN 10 ELSE 15 END)
                  # This valueComputed backfills the column to have the correct values for all existing device_type rows. It does not apply to new rows.
                  constraints:
                    nullable: false
  - changeSet:
      id: remove-person-test_result_delivery
      author: adam@skylight.digital
      comment: Remove the orphaned person.test_result_delivery column
      changes:
        - dropColumn:
            tableName: person
            columns:
              - column:
                  name: test_result_delivery
  - changeSet:
      id: add-no-phi-views
      author: josh@skylight.digital
      comment: Add views for some tables that omit columns containing PHI.
      changes:
        - createView:
            viewName: api_user_no_phi_view
            remarks: A subset of the api_user table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, updated_at, last_seen, is_deleted FROM ${database.defaultSchemaName}.api_user
        - createView:
            viewName: provider_no_phi_view
            remarks: A subset of the provider table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, provider_id FROM ${database.defaultSchemaName}.provider
        - createView:
            viewName: person_no_phi_view
            remarks: A subset of the person table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, organization_id, facility_id, race, gender, ethnicity, county, state, employed_in_healthcare, role, resident_congregate_setting, tribal_affiliation FROM ${database.defaultSchemaName}.person
        - createView:
            viewName: test_event_no_phi_view
            remarks: A subset of the test_event table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT device_specimen_type_id, created_at, created_by, updated_at, updated_by, patient_id, organization_id, result, facility_id, survey_data, date_tested_backdate, test_order_id, correction_status, prior_corrected_test_event_id, internal_id, reason_for_correction FROM ${database.defaultSchemaName}.test_event
  - changeSet:
      id: set-no-phi-user-permissions
      author: josh@skylight.digital
      comment: Restrict access for the simple_report_no_phi user to certain tables/columns in order to prevent PHI exposure.
      changes:
        - sql:
          sql: |
            REVOKE ALL PRIVILEGES ON SCHEMA ${database.defaultSchemaName} FROM PUBLIC;
            GRANT USAGE ON SCHEMA ${database.defaultSchemaName} TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.facility_device_type TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.device_type TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.organization TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.patient_answers TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.facility TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.patient_link TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.data_hub_upload TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.time_of_consent TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.specimen_type TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.device_specimen_type TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.facility_device_specimen_type TO ${noPhiUsername};
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.test_order TO ${noPhiUsername};
            GRANT SELECT ON ${database.defaultSchemaName}.api_user_no_phi_view TO ${noPhiUsername};
            GRANT SELECT ON ${database.defaultSchemaName}.provider_no_phi_view TO ${noPhiUsername};
            GRANT SELECT ON ${database.defaultSchemaName}.person_no_phi_view TO ${noPhiUsername};
            GRANT SELECT ON ${database.defaultSchemaName}.test_event_no_phi_view TO ${noPhiUsername};
      rollback:
        - sql:
          sql: |
            REVOKE ALL PRIVILEGES ON SCHEMA ${database.defaultSchemaName} FROM ${noPhiUsername};
            REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA ${database.defaultSchemaName} FROM ${noPhiUsername};
  - changeSet:
      id: add-patient-registration-link-table
      author: nicholas.a.scialli@omb.eop.gov
      comment: Add a table that stores facility- or organization-specific patient registration links.
      changes:
        - createTable:
            tableName: patient_registration_link
            remarks: This table stores unique registration links associated with a facility or organization.
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column:
                  name: patient_registration_link
                  remarks: The unique link
                  type: *string
                  constraints:
                    nullable: false
                    unique: true
              - column:
                  name: facility_id
                  type: *idtype
                  remarks: The facility associated with the link
                  constraints:
                    nullable: true
                    unique: true
                    foreignKeyName: fk__link__facility
                    references: facility
              - column:
                  name: organization_id
                  type: *idtype
                  remarks: The organization associated with the link
                  constraints:
                    nullable: true
                    unique: true
                    foreignKeyName: fk__link__organization
                    references: organization
              - column: &soft_delete_column
                  name: is_deleted
                  type: boolean
                  remarks: Flag for soft-deletion of entities (false unless the entity has been deleted).
                  constraints:
                    nullable: false
        - sql:
            remarks: Add constraint to allow for a facility or an organization.
            sql: ALTER TABLE patient_registration_link ADD CONSTRAINT facility_or_organization CHECK (num_nonnulls(facility_id, organization_id) = 1)
  - changeSet:
        id: add-spring-session-jdbc-support
        author: emma@skylight.digital
        comment: Add a table to back spring sessions.
        changes: 
          - createTable:
                tableName: spring_session
                remarks: Data store for user sessions, as created by SpringSession.
                columns:
                  - column:
                      name: primary_id
                      type: char(36)
                      remarks: The immutable internal key to identify this session.
                      constraints:
                        nullable: false
                        primaryKey: true
                        primaryKeyName: pk__spring_session
                  - column:
                      name: session_id
                      type: char(36)
                      remarks: A unique, externally visible string that identifies this session.
                      constraints:
                        nullable: false
                        unique: true
                        uniqueConstraintName: uk__spring_session
                  - column:
                      name: creation_time
                      type: DATETIME
                      remarks: The creation timestamp for the session id.
                      constraints: 
                        nullable: false
                  - column:
                      name: last_access_time
                      type: DATETIME
                      remarks: The last time the session id was used.
                      constraints:
                        nullable: false 
                  - column:
                      name: max_inactive_interval
                      type: int
                      remarks: The maximum inactive interval time before a session times out and is invalidated.
                      constraints: 
                        nullable: false
                  - column:
                      name: expiry_time
                      type: DATETIME
                      remarks: The time this session will expire (last_access_time + max_inactive_interval.)
                      constraints: 
                        nullable: false
                  - column:
                      name: principal_name
                      type: *string
                      remarks: The name or UUID of the user for this session.
          - createIndex:
              tableName: spring_session
              indexName: ix__spring_session_expiry_time
              columns:
                - column:
                    name: expiry_time
          - createIndex:
              tableName: spring_session
              indexName: ix__spring_session_principal_name
              columns:
                - column:
                    name: principal_name
          - createTable:
                tableName: spring_session_attributes
                remarks: Attribute store for user sessions.
                columns:
                  - column:
                      name: session_primary_id
                      type: char(36)
                      remarks: The immutable internal key to identify this session.
                      constraints:
                        nullable: false
                        foreignKeyName: fk__spring_session_attributes__spring_session
                        references: spring_session
                        deleteCascade: true
                  - column:
                      name: attribute_name
                      type: *string
                      remarks: The unique name of this attribute.
                      constraints: 
                        nullable: false
                  - column:
                      name: attribute_bytes
                      type: BYTEA
                      remarks: The stored value of the attribute.
                      constraints:
                        nullable: false
          - addPrimaryKey:
              tableName: spring_session_attributes
              columnNames: session_primary_id, attribute_name
  - changeSet:
        id: alter-spring-session-types
        author: emma@skylight.digital
        comment: Change the creation_time, last_access_time, and expiry_time columns to be of type bigint instead of DATETIME. Spring expects bigints for these columns.
        # https://github.com/spring-projects/spring-session/blob/main/spring-session-jdbc/src/main/resources/org/springframework/session/jdbc/schema-postgresql.sql#L4
        changes:
          - sql:
            sql: |
              ALTER TABLE ${database.defaultSchemaName}.spring_session ALTER COLUMN creation_time TYPE bigint USING EXTRACT(EPOCH FROM creation_time);
              ALTER TABLE ${database.defaultSchemaName}.spring_session ALTER COLUMN last_access_time TYPE bigint USING EXTRACT(EPOCH FROM last_access_time);
              ALTER TABLE ${database.defaultSchemaName}.spring_session ALTER COLUMN expiry_time TYPE bigint USING EXTRACT(EPOCH FROM expiry_time);
  - changeSet:
      id: set-null-telephone-to-empty-string
      author: nclyde@skylight.digital
      comment: Sets null values for telephone in the person table to empty string so that the next migration will run successfully
      changes:
          - sql:
            remarks: Sets null values for telephone in the person table to empty string
            sql: |
              WITH migration_user as (
                SELECT internal_id as migrations_user_id
                FROM ${database.defaultSchemaName}.api_user
                WHERE login_email = '${migrations_user_email}')
              UPDATE ${database.defaultSchemaName}.person SET telephone='', updated_at=now(), updated_by=(SELECT migrations_user_id from migration_user) WHERE telephone IS NULL;
            rollback:
              sql: |
                WITH migration_user as (
                  SELECT internal_id as migrations_user_id
                  FROM ${database.defaultSchemaName}.api_user
                  WHERE login_email = '${migrations_user_email}')
                UPDATE ${database.defaultSchemaName}.person SET telephone=null, updated_at=now(), updated_by=(SELECT migrations_user_id from migration_user) WHERE telephone='';
  - changeSet:
      id: add-phone-number-table
      author: nathan@skylight.digital
      comment: Add table to track user phone numbers
      changes:
          - sql:
            remarks: Create the enumerations needed for tracking a phone number's type
            sql: |
              CREATE TYPE ${database.defaultSchemaName}.PHONE_TYPES as ENUM('MOBILE', 'LANDLINE');
            rollback:
              sql: |
                DROP TYPE ${database.defaultSchemaName}.PHONE_TYPES;
          - createTable:
              tableName: phone_number
              remarks: A join table to Person that stores phone numbers with phone type
              columns:
                 - column:
                     name: internal_id
                     type: *idtype
                     remarks: The internal database identifier for this entity
                     constraints:
                       primaryKey: true
                       nullable: false
                 - column:
                     name: person_internal_id
                     type: *idtype
                     remarks: A foreign key to a person
                     constraints:
                       nullable: false
                       foreignKeyName: fk__internal_id__person
                       references: person
                 - column:
                     name: type
                     type: ${database.defaultSchemaName}.PHONE_TYPES
                     remarks: Enumeration of phone type, or null
                     defaultValue: null
                     constraints:
                       nullable: true
                 - column:
                     name: number
                     type: *string
                     remarks: A person's contact telephone number
                     constraints:
                       nullable: false
                 - column: *created_at_column
                 - column: *created_by_column
                 - column: *updated_at_column
                 - column: *updated_by_column
          - addColumn:
              tableName: person
              columns:
                - column:
                    name: primary_phone_internal_id
                    afterColumn: telephone
                    type: *idtype
                    remarks: The identifier of the primary phone number for this patient
                    constraints:
                      nullable: true
                      foreignKeyName: fk__primary__phone__number
                      referencedTableName: phone_number
          - sql:
              remarks: Populate new `phone_number` table with existing `person.telephone` values
              sql: |
                INSERT INTO ${database.defaultSchemaName}.phone_number (
                  internal_id,
                  person_internal_id,
                  type,
                  number,
                  created_at,
                  created_by,
                  updated_at,
                  updated_by
                )
                SELECT
                  gen_random_uuid(),
                  internal_id,
                  null,
                  telephone,
                  NOW(),
                  created_by,
                  NOW(),
                  updated_by
                FROM ${database.defaultSchemaName}.person;
                UPDATE ${database.defaultSchemaName}.person p SET
                  primary_phone_internal_id = pn.internal_id
                FROM ${database.defaultSchemaName}.phone_number pn
                WHERE p.internal_id=pn.person_internal_id;
  - changeSet:
      id: actually-drop-organization-facility-name-constraint
      author: jeremy.a.zitomer@omb.eop.gov
      comment: Previously we tried to drop this constraint using "dropConstraint", which isn't a real liquibase operation so was silently ignored. How sad!
      changes:
        - dropUniqueConstraint:
            tableName: organization
            constraintName: uk__facility__name
  - changeSet:
      id: add-census-dob-group-function
      author: josh@skylight.digital
      comment: Add a function that maps a DOB to a Census DOB age group
      changes:
        - createProcedure:
            dbms: postgresql
            schemaName: ${database.defaultSchemaName}
            procedureBody: |-
              CREATE OR REPLACE FUNCTION get_census_dob_group(date) RETURNS text AS
              $$
              DECLARE
                age_in_years int;
                age_group_minimum int;
              BEGIN
                age_in_years = EXTRACT('year' FROM AGE(NOW(), $1));

                IF age_in_years >= 85 THEN
                  RETURN '85 years and over';
                ELSE
                  age_group_minimum = age_in_years - mod(age_in_years, 5);
                  RETURN format('%s to %s years', age_group_minimum, age_group_minimum + 4);
                END IF;
              END;
              $$
              LANGUAGE plpgsql RETURNS NULL ON NULL INPUT;
            rollback:
              - dropProcedure:
                  procedureName: get_census_dob_group
                  schemaName: ${database.defaultSchemaName}
  - changeSet:
      id: add-census-dob-group-column-to-person-view
      author: josh@skylight.digital
      comment: Add a column for Census DOB age groups to person_no_phi_view
      changes:
        - createView:
            viewName: person_no_phi_view
            remarks: A subset of the person table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, organization_id, facility_id, race, gender, ethnicity, county, state, employed_in_healthcare, role, resident_congregate_setting, tribal_affiliation, get_census_dob_group(person.birth_date) AS census_dob_group FROM ${database.defaultSchemaName}.person
            rollback:
              - dropView:
                  viewName: person_no_phi_view
              - createView:
                  viewName: person_no_phi_view
                  remarks: A subset of the person table with columns containing PHI removed.
                  replaceIfExists: true
                  fullDefinition: false
                  selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, organization_id, facility_id, race, gender, ethnicity, county, state, employed_in_healthcare, role, resident_congregate_setting, tribal_affiliation FROM ${database.defaultSchemaName}.person
  - changeSet:
      id: add-email-back-to-api-user-view
      author: josh@skylight.digital
      comment: Add a column for email address to api_user_no_phi_view
      changes:
        - createView:
            viewName: api_user_no_phi_view
            remarks: A subset of the api_user table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, updated_at, last_seen, is_deleted, login_email FROM ${database.defaultSchemaName}.api_user
            rollback:
              - dropView:
                  viewName: api_user_no_phi_view
              - createView:
                  viewName: api_user_no_phi_view
                  remarks: A subset of the api_user table with columns containing PHI removed.
                  replaceIfExists: true
                  fullDefinition: false
                  selectQuery: SELECT internal_id, created_at, updated_at, last_seen, is_deleted FROM ${database.defaultSchemaName}.api_user
  - changeSet:
      id: drop-person-phone
      author: adam@skylight.digital
      comment: Drop person.telephone, which is now off-row in the phone_number table. See also person.primary_phone_internal_id
      changes:
        - dropColumn:
            tableName: person
            columns:
              - column:
                  name: telephone
  - changeSet:
      id: add-patient-reg-link-to-metabase
      author: adam@skylight.digital
      comment: Adds permission for the no-PHI user to select from the patient registration link table
      changes:
        sql: |
          GRANT SELECT ON TABLE ${database.defaultSchemaName}.patient_registration_link TO ${noPhiUsername};
  - changeSet:
      id: add-patient-preferences-to-person-view
      author: nathan@skylight.digital
      comment: Add person patient preferences to person_no_phi_view
      changes:
        - dropView:
            viewName: person_no_phi_view
        - createView:
            viewName: person_no_phi_view
            remarks: A subset of the person table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: |
              SELECT
                p.internal_id,
                p.created_at,
                p.created_by,
                p.updated_at,
                p.updated_by,
                p.is_deleted,
                p.organization_id,
                p.facility_id,
                p.race,
                p.gender,
                p.ethnicity,
                p.county,
                p.state,
                p.employed_in_healthcare,
                p.role,
                p.resident_congregate_setting,
                p.tribal_affiliation,
                get_census_dob_group(p.birth_date) AS census_dob_group,
                pp.preferred_language,
                pp.test_result_delivery
              FROM ${database.defaultSchemaName}.person p
              JOIN patient_preferences pp on pp.internal_id=p.internal_id
        - sql: |
            GRANT SELECT ON ${database.defaultSchemaName}.person_no_phi_view TO ${noPhiUsername};
      rollback:
        - dropView:
            viewName: person_no_phi_view
        - createView:
            viewName: person_no_phi_view
            remarks: A subset of the person table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: |
              SELECT
                internal_id,
                created_at,
                created_by,
                updated_at,
                updated_by,
                is_deleted,
                organization_id,
                facility_id,
                race,
                gender,
                ethnicity,
                county,
                state,
                employed_in_healthcare,
                role,
                resident_congregate_setting,
                tribal_affiliation,
                get_census_dob_group(person.birth_date) AS census_dob_group
              FROM ${database.defaultSchemaName}.person
        - sql: |
            GRANT SELECT ON ${database.defaultSchemaName}.person_no_phi_view TO ${noPhiUsername};
  - changeSet:
      id: add-organization-type
      author: nicholas.a.scialli@omb.eop.gov
      comment: Add type of organization.
      changes:
        - addColumn:
            tableName: organization
            columns:
              - column:
                  name: organization_type
                  afterColumn: organization_name
                  type: *string
                  remarks: The type of organization
  - changeSet:
      id: add-tenant-data-access-table
      author: brett.m.maden@omb.eop.gov
      comment: Add table to track tenant data access by site admins
      changes:
        - createTable:
            tableName: tenant_data_access
            remarks: Access requests for site admins who access tenant data
            columns:
              - column: *pk_column
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
              - column: *soft_delete_column
              - column:
                  name: api_user_internal_id
                  type: *idtype
                  remarks: A foreign key to a site admin api user who will access tenant data
                  constraints:
                    nullable: false
                    foreignKeyName: fk__internal_id__api_user
                    references: api_user
              - column:
                  name: organization_internal_id
                  type: *idtype
                  remarks: A foreign key to an organization will be accessed
                  constraints:
                    nullable: false
                    foreignKeyName: fk__internal_id__organization
                    references: organization
              - column:
                  name: permissions_data
                  type: jsonb
                  remarks: For now, contains the authorities to be used to access tenant datat as strings
                  constraints:
                    nullable: false
              - column:
                  name: justification
                  type: *string
                  remarks: The reason tenant data access was used
                  constraints:
                    nullable: false
              - column:
                  name: expires_at
                  type: DATETIME
                  remarks: Time that user's access to this organization's data will expire if not canceled before
                  constraints:
                    nullable: false
        - sql: |
            GRANT SELECT ON TABLE ${database.defaultSchemaName}.tenant_data_access TO ${noPhiUsername};
  - changeSet:
      id: add-text-message-sent-table
      author: nicholas.a.scialli@omb.eop.gov
      comment: Add table to track sent text messages
      changes:
        - createTable:
            tableName: text_message_sent
            remarks: A table to store the Patient Link and Twilio text message id
            columns:
              - column:
                  name: internal_id
                  type: *idtype
                  remarks: The internal database identifier for this entity
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: patient_link_internal_id
                  type: *idtype
                  remarks: A foreign key to a patient link
                  constraints:
                    nullable: false
                    foreignKeyName: fk__internal_id__patient_link
                    references: patient_link
              - column:
                  name: twilio_message_id
                  type: *string
                  remarks: The Twilio text message ID
                  constraints:
                    nullable: false
                    unique: true
              - column: *created_at_column
              - column: *created_by_column
              - column: *updated_at_column
              - column: *updated_by_column
        - sql: |
            GRANT SELECT ON ${database.defaultSchemaName}.text_message_sent TO ${noPhiUsername};
  - changeSet:
      id: add-columns-to-provider-view
      author: josh@skylight.digital
      comment: Add additional columns to provider_no_phi_view.
      changes:
        - createView:
            viewName: provider_no_phi_view
            remarks: A subset of the provider table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, provider_id, first_name, last_name, telephone, street, city, county, state, postal_code FROM ${database.defaultSchemaName}.provider;
      rollback:
        - dropView:
            viewName: provider_no_phi_view
        - createView:
            viewName: provider_no_phi_view
            remarks: A subset of the provider table with columns containing PHI removed.
            replaceIfExists: true
            fullDefinition: false
            selectQuery: SELECT internal_id, created_at, created_by, updated_at, updated_by, is_deleted, provider_id FROM ${database.defaultSchemaName}.provider
        - sql: |
            GRANT SELECT ON ${database.defaultSchemaName}.provider_no_phi_view TO ${noPhiUsername};
  - changeSet:
      id: generate-registration-links
      author: nicholas.a.scialli@omb.eop.gov
      comment: Generates self-registration links for orgs and facilities that do not have them yet.
      changes:
        - createProcedure:
            dbms: postgresql
            schemaName: ${database.defaultSchemaName}
            procedureBody: |-
              DO $$
                DECLARE
                  temprow record;
                BEGIN
                FOR temprow IN
                  WITH migration_user AS (SELECT internal_id AS migrations_user_id
                    FROM ${database.defaultSchemaName}.api_user
                    WHERE login_email = '${migrations_user_email}')
                  SELECT
                    o.internal_id AS organization_id, f.internal_id AS facility_id, m.migrations_user_id AS migrations_user_id
                  FROM
                    facility AS f 
                    FULL OUTER JOIN ${database.defaultSchemaName}.patient_registration_link AS p ON f.internal_id = p.facility_id 
                    FULL OUTER JOIN ${database.defaultSchemaName}.organization AS o ON o.internal_id = p.organization_id
                    CROSS JOIN migration_user AS m
                  WHERE
                    p.patient_registration_link IS NULL
                LOOP
                  BEGIN
                    INSERT INTO ${database.defaultSchemaName}.patient_registration_link 
                      (internal_id, created_at, created_by, updated_at, updated_by, organization_id, facility_id, 
                      patient_registration_link, is_deleted) 
                    VALUES (
                      gen_random_uuid(), now(), temprow.migrations_user_id, now(), temprow.migrations_user_id, temprow.organization_id,
                      temprow.facility_id, substr(translate(md5(random() :: text), '150ilos', ''), 0, 6), false
                    );
                  EXCEPTION WHEN unique_violation THEN
                    -- extremely unlikely
                  END;
                END LOOP;
                END;
              $$;
      rollback:
        - sql:
            sql: |
              WITH migration_user as (
                SELECT internal_id as migrations_user_id
                FROM ${database.defaultSchemaName}.api_user
                WHERE login_email = '${migrations_user_email}')
              DELETE FROM ${database.defaultSchemaName}.patient_registration_link 
              USING migration_user m
              WHERE created_by = m.migrations_user_id;
  - changeSet:
        id: audit-http-session
        author: emma@skylight.digital
        comment: Add HTTP session column to api_audit_event.
        changes:
          - addColumn:
              tableName: api_audit_event
              columns:
                - column:
                    name: session
                    type: jsonb
                    remarks: The HTTP session information for this request (only applies to REST requests).