plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'org.liquibase.gradle' version '2.1.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube'  version '3.3'
    id 'com.gorylenko.gradle-git-properties' version '2.3.2'
    id "com.diffplug.spotless" version "6.0.4"
}

group = 'gov.cdc.usds'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    set('springCloudVersion', "2021.0.0")
}
repositories {
    mavenCentral()
}

dependencies {
    // core infrastructure
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // log4j vulnerability fixes (Dec 2021)
    implementation 'org.apache.logging.log4j:log4j-api:2.17.0'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.0'

    // data layer dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.vladmihalcea:hibernate-types-52:2.14.0'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.postgresql:postgresql'

    // data validation
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.40'
    implementation 'com.smartystreets.api:smartystreets-java-sdk:3.12.3'

    // UI layer dependencies
    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:12.0.0"
    implementation "com.graphql-java-kickstart:graphiql-spring-boot-starter:11.1.0"
    implementation "com.zhokhov.graphql:graphql-datetime-spring-boot-starter:4.1.0"
    implementation 'org.json:json:20210307'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Okta dependencies
    implementation 'com.okta.spring:okta-spring-boot-starter:2.1.4'
    implementation 'com.okta.sdk:okta-sdk-api:8.0.0'
    runtimeOnly 'com.okta.sdk:okta-sdk-impl:8.0.0'
    runtimeOnly 'com.okta.sdk:okta-sdk-httpclient:8.0.0'

    // SpringSession dependencies
    runtimeOnly 'org.springframework.session:spring-session-jdbc'

    // App insights instrumentation
    implementation 'com.microsoft.azure:applicationinsights-core:2.6.4'

    // Twilio for SMS
    implementation 'com.twilio.sdk:twilio:8.22.1'

    // SendGrid for Email
    implementation 'com.sendgrid:sendgrid-java:4.8.1'

    // For local Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // JPA Hibernate static metamodel generation
    compileOnly 'org.hibernate:hibernate-jpamodelgen:5.6.3.Final'
    annotationProcessor'org.hibernate:hibernate-jpamodelgen'

    // graphql-java-extended-validation schema directives
    implementation 'com.graphql-java:graphql-java-extended-validation:17.0-hibernate-validator-6.2.0.Final'

    implementation 'com.azure:azure-storage-queue:12.11.2'

    // test/check dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:12.0.0"
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.yannbriancon:spring-hibernate-query-utils:2.0.0'

    // used to autoconfigure WireMock for testing
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.awaitility:awaitility:4.1.1'

    // dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // WireMock (only used for testing)
    testCompileOnly 'com.github.tomakehurst:wiremock-jre8:2.32.0'

    // Forcing these version resolutions over the BOM of spring-cloud-dependencies below
    runtimeOnly 'com.azure:azure-core-http-netty:1.11.5'
    runtimeOnly 'com.azure:azure-core:1.24.0'
    runtimeOnly 'com.azure:azure-storage-common:12.14.1'
    runtimeOnly "com.azure:azure-storage-queue:12.11.2"

    runtimeOnly 'io.zipkin.brave:brave-instrumentation-http:5.13.6'
    runtimeOnly 'io.zipkin.brave:brave:5.13.6'
    runtimeOnly "io.zipkin.reporter2:zipkin-reporter-brave:2.16.3"
    runtimeOnly "io.zipkin.reporter2:zipkin-reporter:2.16.3"
    runtimeOnly 'io.zipkin.zipkin2:zipkin:2.23.16'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo()
}

configurations {
    liquibaseRuntime.extendsFrom runtimeClasspath // inefficient but extremely effective
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

checkstyleTest {
   configFile = file("config/checkstyle/checkstyleTest.xml")
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
    dependsOn test // tests are required to run before generating the report
}

// Prefer SPRING_DATASOURCE_URL if provided
def dbConnectionString = System.getenv("SPRING_DATASOURCE_URL") ?: "jdbc:postgresql://127.0.0.1:${System.getenv("SR_DB_PORT") ?: 5432}/simple_report"
// If SPRING_DATASOURCE_URL is provided, assume target DB is non-local and schema is "public"
def defaultSchema = System.getenv("SPRING_DATASOURCE_URL") ? "public" : "simple_report"

liquibase {
    activities {
        main {
            driver "org.postgresql.Driver"
            changeLogFile "/db/changelog/db.changelog-master.yaml"
            url dbConnectionString
            username "simple_report_migrations"
            password "migrations456"
            defaultSchemaName defaultSchema
            classpath "src/main/resources"
            // this shadows application.yaml: should probably be in a shared properties file
            changeLogParameters noPhiUsername: "simple_report_no_phi"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "CDCgov_prime-data-input-client"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        // In order to get both the frontend and backend code to report, we need to set the sonar project to the root directory.
        property "sonar.sources", "backend/src/main/java,frontend/src,ops/services/app_functions/"
        property "sonar.exclusions", "backend/src/**/*Config*.java,frontend/src/**/*.test.*,frontend/src/stories/**/*,frontend/src/**/*.stories.tsx,frontend/src/generated/*.tsx,ops/services/app_functions/**/*.test.*,ops/services/app_functions/**/*config*"
        property "sonar.coverage.exclusions", "frontend/src/setupTests.js"
        property "sonar.cpd.exclusions", "frontend/src/lang/*.ts"
        property "sonar.javascript.lcov.reportPaths", "frontend/coverage/lcov.info,ops/services/app_functions/report_stream_batched_publisher/functions/coverage/lcov.info"
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        targetExclude("build/generated/sources/**/*.java")
    }
}

task testDbStart(type: Exec) {
    environment "SR_DB_PORT", testDbPort
    commandLine "docker-compose", "-p", "simple-report-tests", "up", "-d", "db"
}

task testDbStop(type: Exec) {
    commandLine "docker-compose", "-p", "simple-report-tests", "down"
}

task testDbReset(type: Exec) {
    environment "SR_DB_PORT", testDbPort
    commandLine "db-setup/nuke-db.sh"
}

test {
    // people sometimes export this to run local dev more easily: don't let it break the tests
    environment "SPRING_PROFILES_ACTIVE", ""
    // For some reason, setting this in application-default doesn't work, but it's needed
    // to prevent the Okta client from throwing an exception when we point it at WireMock,
    // which doesn't use HTTPS
    environment "OKTA_TESTING_DISABLEHTTPSCHECK", "true"
    useJUnitPlatform()
    // uncomment this to log to stdout when each test starts, so you can tell what's going on
    // testLogging {
    //   events "started", "failed"
    // }
    systemProperty "test-db-port", testDbPort
    if (System.getenv("CI") == null) {
        dependsOn testDbStart
        finalizedBy testDbStop
    }
}

