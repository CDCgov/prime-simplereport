name: DB Liquibase Action
description: Runs Liquibase actions in a container
inputs:
  deploy_env:
    description: The environment of the database.
    required: true
  docker_compose_file:
    description: The docker compose file to use.
    default: docker-compose.db-liquibase-action.yml
    required: false
  action:
    description: The git sha of the image to use.
    required: true
  liquibase_rollback_tag:
    description: Only required if rollback is selected. The Liquibase tag to roll back to
    required: false
  azure_credentials:
    description: Azure credentials
    required: true
  acr_repo_url:
    description: ACR repo url
    required: true
  acr_admin_username:
    description: ACR admin username
    required: true
  acr_admin_pasword:
    description: ACR admin password
    required: true
  terraform_arm_client_id:
    description: Terraform ARM client id
    required: true
  terraform_arm_client_secret:
    description: Terraform ARM client secret
    required: true
  terraform_arm_subscription_id:
    description: Terraform ARM subscription id
    required: true
  terraform_arm_tenant_id:
    description: Terraform ARM tenant id
    required: true
  okta_api_token:
    description: Okta API token
    required: true
  

runs:
  using: composite
  steps:

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}

    - name: Login to ACR
      shell: bash
      run: docker login ${{ inputs.acr_repo_url }} -u ${{ inputs.acr_admin_username }} -p ${{ inputs.acr_admin_pasword }}

    - name: Delete existing ${{ inputs.action }} image
      shell: bash
      run: |
        if [ "$(az acr repository show --name simplereportacr --image api/simple-report-api-build:${{ inputs.action }} | jq -r '.name')" == "${{ inputs.action }}" ]; then
          echo "Deleting ${{ inputs.action }} image"
          az acr repository delete --name simplereportacr --image api/simple-report-api-build:${{ inputs.action }} --yes
        else
          echo "No ${{ inputs.action }} image to delete"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      shell: bash
      working-directory: ./backend
      env:
        DOCKER_COMPOSE_FILE: ${{ inputs.docker_compose_file }}
      run: ./build_and_push.sh

    - name: Checkout the repo
      uses: actions/checkout@v3
    
    - name: Terraform setup
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: 1.3.3
    
    - name: Terraform
      shell: bash
      working-directory: ./ops
      env:
        ARM_CLIENT_ID: ${{ inputs.terraform_arm_client_id }}
        ARM_CLIENT_SECRET: ${{ inputs.terraform_arm_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.terraform_arm_subscription_id }}
        ARM_TENANT_ID: ${{ inputs.terraform_arm_tenant_id }}
        OKTA_API_TOKEN: ${{ inputs.okta_api_token }}
      run: |
        make init-${{ inputs.deploy_env }}
        terraform -chdir=${{ inputs.deploy_env }} apply \
        -var acr_image_tag=dummy \
        -var liquibase_rollback_tag="${{ inputs.liquibase_rollback_tag }}" \
        -var image_action=${{ inputs.action }} \
        -target module.db_liquibase_action[0] --auto-approve

    - name: Display container logs
      if: always()
      shell: bash
      run: |
        RESOURCE_GROUP=${{ inputs.deploy_env }}
        if [[ "${{ inputs.deploy_env }}" == *dev* ]]; then RESOURCE_GROUP=dev; fi;
        echo "Resource Group: $RESOURCE_GROUP"
        az container logs --follow -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-${{ inputs.deploy_env }}-db-${{ inputs.action }}"
        if [ "$(az container show -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-${{ inputs.deploy_env }}-db-${{ inputs.action }}" | jq '.containers[].instanceView.currentState.exitCode')" != "null" ]; then
          exit $(az container show -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-${{ inputs.deploy_env }}-db-${{ inputs.action }}" | jq '.containers[].instanceView.currentState.exitCode')
        else
          echo "No instance view available for the specified container group."
          exit 1
        fi;

    - name: Terraform destroy DB db_liquibase_action Container Instance
      if: always()
      shell: bash
      run: |
        terraform -chdir=${{ inputs.deploy_env }} destroy \
        -var acr_image_tag=dummy \
        -var liquibase_rollback_tag="" \
        -var image_action=${{ inputs.action }} \
        -target module.db_liquibase_action[0] --auto-approve
