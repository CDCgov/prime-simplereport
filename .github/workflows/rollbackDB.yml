name: Rollback DB

on:
  workflow_dispatch:
    inputs:
      environment:
        description: |
          The environment of the database.
        required: true
        type: choice
        options: [demo, dev, dev2, dev3, dev4, dev5, dev6, dev7, pentest, test, training, stg, prod]
        default: dev
      action:
        description: |
          The liquibase action to run.
        required: true
        type: choice
        options: [validate, clear-checksums, rollback]
        default: validate
      tag:
        description: |
          Only required if rollback is selected.
          The Liquibase tag to roll back to
        type: string
        default: ""

env:
  DEPLOY_ENV: ${{ github.event.inputs.environment }}
  DOCKER_COMPOSE_FILE: docker-compose.db-liquibase-action.yml
  GIT_SHA: ${{ github.event.inputs.action }}
  LIQUIBASE_ROLLBACK_TAG: ${{ github.event.inputs.tag }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: docker login ${{ secrets.ACR_REPO_URL }} -u ${{ secrets.ACR_ADMIN_USERNAME }} -p ${{ secrets.ACR_ADMIN_PASWORD }}

      - name: Delete existing $GIT_SHA image
        run: |
          if [ "$(az acr repository show --name simplereportacr --image api/simple-report-api-build:$GIT_SHA | jq -r '.name')" == "$GIT_SHA" ]; then
            echo "Deleting $GIT_SHA image"
            az acr repository delete --name simplereportacr --image api/simple-report-api-build:$GIT_SHA --yes
          else
            echo "No $GIT_SHA image to delete"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker images
        run: ./build_and_push.sh

  action:
    runs-on: ubuntu-latest
    needs: build-image
    defaults:
      run:
        working-directory: ./ops
    env:
      ARM_CLIENT_ID: ${{ secrets.TERRAFORM_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TERRAFORM_ARM_TENANT_ID }}
      OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.3.3
      
      - name: Terraform init
        run: make init-${{ env.DEPLOY_ENV }}
      
      - name: Terraform apply DB db_liquibase_action Container Instance
        run: |
          terraform -chdir=$DEPLOY_ENV apply \
          -var acr_image_tag=dummy \
          -var liquibase_rollback_tag="$LIQUIBASE_ROLLBACK_TAG" \
          -var image_action=$GIT_SHA \
          -target module.db_liquibase_action[0] --auto-approve

      - name: Display container logs
        if: always()
        run: |
          RESOURCE_GROUP=$DEPLOY_ENV
          if [[ "$DEPLOY_ENV" == *dev* ]]; then RESOURCE_GROUP=dev; fi;
          echo "Resource Group: $RESOURCE_GROUP"
          az container logs --follow -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-$DEPLOY_ENV-db-$GIT_SHA"
          if [ "$(az container show -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-$DEPLOY_ENV-db-$GIT_SHA" | jq '.containers[].instanceView.currentState.exitCode')" != "null" ]; then
            exit $(az container show -g "prime-simple-report-$RESOURCE_GROUP" --name "simple-report-$DEPLOY_ENV-db-$GIT_SHA" | jq '.containers[].instanceView.currentState.exitCode')
          else
            echo "No instance view available for the specified container group."
            exit 1
          fi;

      - name: Terraform destroy DB db_liquibase_action Container Instance
        if: always()
        run: |
          terraform -chdir=$DEPLOY_ENV destroy \
          -var acr_image_tag=dummy \
          -var liquibase_rollback_tag="" \
          -var image_action=$GIT_SHA \
          -target module.db_liquibase_action[0] --auto-approve
