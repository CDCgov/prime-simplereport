name: Run end-to-end tests

# Run this on pushes to any branch that change a backend file or the workflow definition
on:
  workflow_dispatch: # because sometimes you just want to force a branch to have tests run
  push:
    branches:
      - "**"

env:
  NODE_VERSION: 14
  JAVA_VERSION: 11
  FIREFOX_VERSION: latest
  PROJECT_ROOT: /home/runner/work/prime-simplereport/prime-simplereport # Hardcoding this here because env.WORKSPACE_ROOT gets overridden by one of the steps downstream. We only need this for Sonar.
  REACT_APP_QR_CODE_ENABLED: true
  REACT_APP_TEST_TRIBAL_AFFILIATION_BYPASS: true
  SIMPLE_REPORT_TWILIO_ENABLED: false
  TWILIO_ACCOUNT_SID: ${{secrets.TWILIO_TEST_ACCOUNT_SID }}
  TWILIO_AUTH_TOKEN: ${{secrets.TWILIO_TEST_AUTH_TOKEN }}
  SIMPLE_REPORT_SENDGRID_ENABLED: false
  SIMPLE_REPORT_SENDGRID_FROM_EMAIL: admin@simplereport.gov
  SIMPLE_REPORT_SENDGRID_ACCOUNT_REQUEST_RECIPIENT: usds@cdc.gov
  REACT_APP_BASE_URL: http://localhost.simplereport.gov
  REACT_APP_BACKEND_URL: http://localhost.simplereport.gov/api

defaults:
  run:
    working-directory: .

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      test-db:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: this_is_a_super_secure_admin_password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Disable shallow clones so Sonar can have all the data
      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Cache Java Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('*.gradle', 'gradle/dependency-locks/*') }}
      - name: Set up postgresql sidecar
        env:
          PGHOST: localhost
          PGPASSFILE: backend/db-setup/.pgpass_ci
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          LIB_DIR: backend/db-setup
        run: |
          chmod 0600 $PGPASSFILE
          backend/db-setup/create-db.sh
      - name: Set up nginx reverse proxy
        run: |
          sudo cp ./frontend/e2e/utils/localhost.simplereport.gov /etc/nginx/sites-available
          sudo ln -s /etc/nginx/sites-available/localhost.simplereport.gov /etc/nginx/sites-enabled/localhost.simplereport.gov
          sudo echo "127.0.0.1 localhost.simplereport.gov" | sudo tee -a /etc/hosts
          echo "server.servlet.session.cookie.domain: localhost.simplereport.gov" | tee -a ./backend/src/main/resources/application-local.yaml 
          sudo systemctl start nginx
      - name: Run API
        env:
          OKTA_API_KEY: ${{ secrets.OKTA_API_KEY }}
          OKTA_OAUTH2_CLIENT_ID: ${{ secrets.OKTA_OAUTH2_CLIENT_ID }}
          SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
          SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
        working-directory: ./backend
        run: ./gradlew bootRun --args='--spring.profiles.active=e2e' &> ../gradle-log.txt &
      - name: Use Node.js ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: Cache npm local files
        uses: actions/cache@v2
        with:
          path: |
            ./frontend/node_modules
          key: npm-${{matrix.node}}-${{ hashFiles('frontend/yarn.lock', 'frontend/package.json') }}
      - name: Node setup
        working-directory: ./frontend
        run: yarn
      - name: Run frontend
        working-directory: ./frontend
        run: yarn start &> ../yarn-log.txt &
      - name: Setup firefox
        uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: ${{ env.FIREFOX_VERSION }}
      - name: Run e2e tests
        working-directory: ./frontend
        run: yarn e2e
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: gradle logs
          path: gradle-log.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: yarn logs
          path: yarn-log.txt
