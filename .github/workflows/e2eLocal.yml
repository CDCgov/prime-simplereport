name: Run end-to-end tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

env:
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: 'zulu'

jobs:

  build_cypress_image:
    uses: ./.github/workflows/buildCypressImage.yml

  cypress-local-env:
    needs: [build_cypress_image]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Swap Space
      uses: ./.github/actions/set-swap-space
      with:
        swap-size-gb: 10

    - name: Generate certs
      run: |
        echo "::group::Generate ssl certs"
        sudo apt update
        sudo apt install libnss3-tools
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install mkcert
        mkcert -install
        mkdir -p certs
        cd certs
        mkcert localhost.simplereport.gov
        mv localhost.simplereport.gov.pem localhost.simplereport.gov.crt
        mv localhost.simplereport.gov-key.pem localhost.simplereport.gov.key
        cd ..
        echo "::endgroup::"

    - name: Update files permissions
      # Even though we don't use it, we need the .env file created here due to an issue similar to this one: https://github.com/mutagen-io/mutagen/issues/265
      run: |
        echo "::group::Update permissions"
        echo FAKE_ENV="true" >> .env
        sudo chmod -R 777 backend
        sudo chmod -R 777 frontend
        echo "::endgroup::"

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{env.JAVA_VERSION}}
        distribution: ${{env.JAVA_DISTRIBUTION}}

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Cypress
      timeout-minutes: 30
      env:
        # CI settings
        CI: 1
        # docker settings
        DOCKER_CLIENT_TIMEOUT: 180
        DOCKER_CYPRESS_IMAGE_VERSION: ${{ needs.build_cypress_image.outputs.version }}
        DOCKER_DATABASE_IMAGE_VERSION: ${{ needs.build_database_image.outputs.version }}
        COMPOSE_HTTP_TIMEOUT: 180
        # backend settings
        SPRING_PROFILES_ACTIVE: e2e,db-dockerized
        OKTA_TESTING_DISABLEHTTPSCHECK: "true"
        OKTA_API_KEY: ${{ secrets.OKTA_API_KEY }}
        OKTA_OAUTH2_CLIENT_ID: 0oa1k0163nAwfVxNW1d7
        SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
        SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
        SPRING_LIQUIBASE_ENABLED: "true"
        GIT_DISCOVERY_ACROSS_FILESYSTEM: 1
        # cypress settings
        CYPRESS_OKTA_USERNAME: ${{ secrets.CYPRESS_OKTA_USERNAME }}
        CYPRESS_OKTA_PASSWORD: ${{ secrets.CYPRESS_OKTA_PASSWORD }}
        CYPRESS_OKTA_SECRET: ${{ secrets.CYPRESS_OKTA_SECRET }}
        CYPRESS_BACKEND_URL: "https://localhost.simplereport.gov/api"
        WIREMOCK_URL: "http://cypress:8088"
        SPEC_PATH: "cypress/integration/*"
        TEST_ENV: "https://localhost.simplereport.gov"
        # frontend settings
        REACT_APP_OKTA_URL: "http://cypress:8088"
        REACT_APP_OKTA_CLIENT_ID: 0oa1k0163nAwfVxNW1d7
        REACT_APP_BASE_URL: https://localhost.simplereport.gov
        REACT_APP_BACKEND_URL: https://localhost.simplereport.gov/api
        PUBLIC_URL: /app/
        REACT_APP_OKTA_ENABLED: "true"
        REACT_APP_DISABLE_MAINTENANCE_BANNER: "true"
      shell: bash
      run: |
        echo "::group::Run Cypress locally"
        echo "${{ needs.build_cypress_image.outputs.version }}"
        echo "Cypress branch tag (or latest): ${{ needs.build_cypress_image.outputs.version }}"
        docker compose -f docker-compose.yml -f docker-compose.cypress.yml up --abort-on-container-exit --attach cypress --exit-code-from cypress
        echo "::endgroup::"

    - name: Get docker logs
      if: always()
      shell: bash
      run: |
        CONTAINERS=$(docker ps -a --format '{{.Names}}')
        for container in $CONTAINERS
        do
          echo "Saving $container logs"
          docker logs $container >& cypress/${container}.log
        done

    - name: Stop containers
      if: always()
      shell: bash
      run: |
        echo "::group::Stop Docker containers"
        docker compose -f docker-compose.yml -f docker-compose.cypress.yml down
        echo "::endgroup::"

    - name: Archive cypress failures
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: cypress-results
        path: |
          cypress/videos/*
          cypress/screenshots/*

    - name: Archive docker logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: cypress/*.log
