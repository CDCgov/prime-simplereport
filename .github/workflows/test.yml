name: Test

# Run this on pushes to any branch that change a backend file or the workflow definition
on:
  workflow_dispatch: # because sometimes you just want to force a branch to have tests run
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

env:
  NODE_VERSION: 14
  JAVA_VERSION: 11
  PROJECT_ROOT: /home/runner/work/prime-simplereport/prime-simplereport # Hardcoding this here because env.WORKSPACE_ROOT gets overridden by one of the steps downstream. We only need this for Sonar.

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      test-db:
        image: postgres:11-alpine
        env:
          POSTGRES_PASSWORD: this_is_a_super_secure_admin_password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Disable shallow clones so Sonar can have all the data
      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Cache Java Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('*.gradle', 'gradle/dependency-locks/*') }}
      - name: Set up postgresql sidecar
        env:
          PGHOST: localhost
          PGPASSFILE: db-setup/.pgpass_ci
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          LIB_DIR: db-setup
        run: |
          chmod 0600 $PGPASSFILE
          db-setup/create-db.sh
      - name: Run Java Tests
        env:
          OKTA_TESTING_DISABLEHTTPS: true
          TWILIO_ACCOUNT_SID: ${{secrets.TWILIO_TEST_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{secrets.TWILIO_TEST_AUTH_TOKEN }}
        run: ./gradlew jacocoTestReport -PtestDbPort=5432
      - name: Archive Test Results
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-report
          path: backend/build/reports/tests/test
          retention-days: 7
      - name: Use Node.js ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: Cache yarn
        uses: actions/cache@v2
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Node setup
        working-directory: ./frontend
        run: yarn install --prefer-offline
      - name: Test
        working-directory: ./frontend
        run: yarn test:ci
      - name: "Function Apps: npm install"
        working-directory: ./ops/services/app_functions/report_stream_batched_publisher/functions
        run: npm ci
      - name: "Function Apps: Test"
        working-directory: ./ops/services/app_functions/report_stream_batched_publisher/functions
        run: npm run coverage
      - name: Sonar analysis
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube -Dsonar.projectBaseDir=${{ env.PROJECT_ROOT }} --info
  build-jar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Cache Java Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('*.gradle', 'gradle/dependency-locks/*') }}
      - name: Run Java Build
        run: ./gradlew assemble
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Cache Java Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('*.gradle', 'gradle/dependency-locks/*') }}
      - name: Run Style checks
        run: ./gradlew checkstyleMain checkstyleTest spotlessCheck --continue
  frontend-lint-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: Cache yarn
        uses: actions/cache@v2
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Node setup
        working-directory: ./frontend
        run: yarn
      - name: Lint front-end
        working-directory: ./frontend
        run: yarn lint
      - name: Build release
        working-directory: ./frontend
        run: yarn build
