name: Deploy Prod

on:
  workflow_run:
    workflows: ["Deploy Stg"]
    types:
      - completed

env:
  DEPLOY_ENV: prod
  NODE_VERSION: 14
concurrency:
  group: prod-deploy

jobs:
  build-docker:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ACR
        run: docker login ${{ secrets.ACR_REPO_URL }} -u ${{ secrets.ACR_ADMIN_USERNAME }} -p ${{ secrets.ACR_ADMIN_PASWORD }}
      - name: Build and push Docker images
        run: ./build_and_push.sh
  prerelease-backend:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [build-docker]
    defaults:
      run:
        working-directory: ./ops
    env: # all Azure interaction is through terraform
      ARM_CLIENT_ID: ${{ secrets.TERRAFORM_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TERRAFORM_ARM_TENANT_ID }}
      OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4
      - name: Build ReportStream function app
        uses: ./.github/actions/build-reportstream-functions
        with:
          deploy-env: ${{env.DEPLOY_ENV}}
      - name: Terraform Init
        run: make init-${{ env.DEPLOY_ENV }}
      - name: Terraform deploy (infrastructure and staging slot)
        run: make deploy-${{ env.DEPLOY_ENV }}
      - name: Wait for correct release to be deployed in staging slot
        timeout-minutes: 5
        run: make wait-for-${{ env.DEPLOY_ENV }}-slot-commit
      - name: Wait for staging deploy to be ready
        timeout-minutes: 1
        run: make wait-for-${{ env.DEPLOY_ENV }}-slot-readiness
  build-frontend:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      download-url: ${{steps.upload.outputs.url}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: Use cache for node_modules
        uses: actions/cache@v2
        with:
          path: |
            ./frontend/node_modules
          key: npm-${{env.NODE_VERSION}}-${{ hashFiles('frontend/yarn.lock', 'frontend/package.json') }}
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: ./.github/actions/build-frontend
        name: Build front-end application
        with:
          deploy-env: ${{env.DEPLOY_ENV}}
          smarty-streets-key: ${{ secrets.SMARTY_STREETS_KEY }}
          base-domain-name: www.simplereport.gov
          client-tarball: ./client.tgz
          okta-enabled: true
          okta-url: https://hhs-prime.okta.com
          okta-client-id: 0oa5ahrdfSpxmNZO74h6
      - name: Save compiled frontend application
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: frontend-tarball
          path: client.tgz
          retention-days: 1
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://simplereport.gov
    needs: [build-frontend, prerelease-backend]
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Retrieve frontend build
        uses: actions/download-artifact@v2
        with:
          name: frontend-tarball
      - name: Promote and deploy
        uses: ./.github/actions/deploy-application
        with:
          client-tarball: client.tgz
          deploy-env: ${{env.DEPLOY_ENV}}
