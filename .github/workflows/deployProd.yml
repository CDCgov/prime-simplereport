name: Deploy Prod

on:
  release:
    types: [released]

env:
  DEPLOY_ENV: prod
  NODE_VERSION: 14
concurrency:
  group: prod-deploy

jobs:
  verify-lower-envs-are-released:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ops
    steps:
      - uses: actions/checkout@v2
      - name: Check that the current release is in the stg environment
        env:
            CURL_TIMEOUT: 5
        run: make check-stg-commit check-stg-readiness
      - name: Check that the current release is in the dev environment
        env:
            CURL_TIMEOUT: 5
        run: make check-dev-commit check-dev-readiness
  build-docker:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ACR
        run: docker login ${{ secrets.ACR_REPO_URL }} -u ${{ secrets.ACR_ADMIN_USERNAME }} -p ${{ secrets.ACR_ADMIN_PASWORD }}
      - name: Build and push Docker images
        run: ./build_and_push.sh
  prerelease-backend:
    runs-on: ubuntu-latest
    needs: [build-docker, verify-lower-envs-are-released]
    defaults:
      run:
        working-directory: ./ops
    env: # all Azure interaction is through terraform
      ARM_CLIENT_ID: ${{ secrets.TERRAFORM_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TERRAFORM_ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.1
      - name: Terraform Init
        run: make init-${{ env.DEPLOY_ENV }}
      - name: Terraform deploy (infrastructure and staging slot)
        run: make deploy-${{ env.DEPLOY_ENV }}-api
      - name: Wait for correct release to be deployed in staging slot
        timeout-minutes: 5
        run: make wait-for-${{ env.DEPLOY_ENV }}-slot-release
      - name: Wait for staging deploy to be ready
        timeout-minutes: 1
        run: make wait-for-${{ env.DEPLOY_ENV }}-slot-readiness
  build-frontend:
    runs-on: ubuntu-latest
    needs: [verify-lower-envs-are-released]
    outputs:
      download-url: ${{steps.upload.outputs.url}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: Use cache for node_modules
        uses: actions/cache@v2
        with:
          path: |
            ./frontend/node_modules
          key: npm-${{env.NODE_VERSION}}-${{ hashFiles('frontend/yarn.lock', 'frontend/package.json') }}
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Add upload URL to environment
        run: echo UPLOAD_URL=$(jq -r .release.upload_url < ${GITHUB_EVENT_PATH}| sed -e 's/{?name,label}//') >> $GITHUB_ENV
      - uses: ./.github/actions/build-frontend
        name: Build front-end application
        with:
          deploy-env: ${{env.DEPLOY_ENV}}
          smarty-streets-key: ${{ secrets.SMARTY_STREETS_KEY }}
          base-domain-name: simplereport.gov
          client-tarball: ./client.tgz
      - name: Save compiled frontend application
        id: upload
        if: success()
        run: |
          DOWNLOAD_URL=$(
            curl -s -X POST --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --data-binary @client.tgz \
              --header "Accept: application/vnd.github.v3+json" \
              --header "Content-type:  application/gzip" \
              "$UPLOAD_URL?name=simple-report-client-application.tgz&label=Compiled%20Client%20Application" \
            | jq .url
          )
          if [[ -n "$DOWNLOAD_URL" ]]; then
            echo Uploaded file to $DOWNLOAD_URL
            echo "::set-output name=url::$DOWNLOAD_URL"
          else
            echo "Upload unsuccessful (probably you already uploaded it?)"
            exit 1
          fi
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://simplereport.gov
    needs: [build-frontend, prerelease-backend]
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Retrieve frontend build from release
        run: |
          curl -L -v \
           --header 'Accept: application/octet-stream' \
           --header 'Authorization: Bearer ${{secrets.GITHUB_TOKEN}}' \
           ${{needs.build-frontend.outputs.download-url}} \
           -o client.tgz
      - name: Promote and deploy
        uses: ./.github/actions/deploy-application
        with:
          client-tarball: client.tgz
          deploy-env: ${{env.DEPLOY_ENV}}
